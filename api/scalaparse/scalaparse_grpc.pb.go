// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scalaparse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScalaParserClient is the client API for ScalaParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScalaParserClient interface {
	Parse(ctx context.Context, in *ScalaParseRequest, opts ...grpc.CallOption) (*ScalaParseResponse, error)
}

type scalaParserClient struct {
	cc grpc.ClientConnInterface
}

func NewScalaParserClient(cc grpc.ClientConnInterface) ScalaParserClient {
	return &scalaParserClient{cc}
}

func (c *scalaParserClient) Parse(ctx context.Context, in *ScalaParseRequest, opts ...grpc.CallOption) (*ScalaParseResponse, error) {
	out := new(ScalaParseResponse)
	err := c.cc.Invoke(ctx, "/api.scalaparse.ScalaParser/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScalaParserServer is the server API for ScalaParser service.
// All implementations must embed UnimplementedScalaParserServer
// for forward compatibility
type ScalaParserServer interface {
	Parse(context.Context, *ScalaParseRequest) (*ScalaParseResponse, error)
	mustEmbedUnimplementedScalaParserServer()
}

// UnimplementedScalaParserServer must be embedded to have forward compatible implementations.
type UnimplementedScalaParserServer struct {
}

func (UnimplementedScalaParserServer) Parse(context.Context, *ScalaParseRequest) (*ScalaParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedScalaParserServer) mustEmbedUnimplementedScalaParserServer() {}

// UnsafeScalaParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScalaParserServer will
// result in compilation errors.
type UnsafeScalaParserServer interface {
	mustEmbedUnimplementedScalaParserServer()
}

func RegisterScalaParserServer(s grpc.ServiceRegistrar, srv ScalaParserServer) {
	s.RegisterService(&ScalaParser_ServiceDesc, srv)
}

func _ScalaParser_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScalaParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScalaParserServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.scalaparse.ScalaParser/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScalaParserServer).Parse(ctx, req.(*ScalaParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScalaParser_ServiceDesc is the grpc.ServiceDesc for ScalaParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScalaParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.scalaparse.ScalaParser",
	HandlerType: (*ScalaParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _ScalaParser_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/scalaparse/scalaparse.proto",
}
