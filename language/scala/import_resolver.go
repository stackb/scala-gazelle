package scala

import (
	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
)

// ImportsResolver implementations work as a chain.
type ImportsResolver interface {
	// ResolveImports to resolve a set of imports in the the resolved map.
	ResolveImports(imports ImportOriginMap, resolved LabelImportMap, next ImportResolver)
}

type ImportResolver interface {
	// ImportResolve translates imported libraries for a given rule into Bazel
	// dependencies. Information about imported libraries is returned for each
	// rule generated by language.GenerateRules in
	// language.GenerateResult.Imports. Resolve generates a "deps" attribute (or
	// the appropriate language-specific equivalent) for each import according to
	// language-specific rules and heuristics.
	ResolveImport(c *config.Config, ix *resolve.RuleIndex, rc *repo.RemoteCache, imp resolve.ImportSpec, origin ImportOrigin, from label.Label)
}
