// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package parse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompilerClient is the client API for Compiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompilerClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
}

type compilerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompilerClient(cc grpc.ClientConnInterface) CompilerClient {
	return &compilerClient{cc}
}

func (c *compilerClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := c.cc.Invoke(ctx, "/build.stack.gazelle.scala.parse.Compiler/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompilerServer is the server API for Compiler service.
// All implementations must embed UnimplementedCompilerServer
// for forward compatibility
type CompilerServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
	mustEmbedUnimplementedCompilerServer()
}

// UnimplementedCompilerServer must be embedded to have forward compatible implementations.
type UnimplementedCompilerServer struct {
}

func (UnimplementedCompilerServer) Compile(context.Context, *CompileRequest) (*CompileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedCompilerServer) mustEmbedUnimplementedCompilerServer() {}

// UnsafeCompilerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompilerServer will
// result in compilation errors.
type UnsafeCompilerServer interface {
	mustEmbedUnimplementedCompilerServer()
}

func RegisterCompilerServer(s grpc.ServiceRegistrar, srv CompilerServer) {
	s.RegisterService(&Compiler_ServiceDesc, srv)
}

func _Compiler_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompilerServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.gazelle.scala.parse.Compiler/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompilerServer).Compile(ctx, req.(*CompileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Compiler_ServiceDesc is the grpc.ServiceDesc for Compiler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compiler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "build.stack.gazelle.scala.parse.Compiler",
	HandlerType: (*CompilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _Compiler_Compile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "build/stack/gazelle/scala/parse/compiler.proto",
}
