// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	scalarule "github.com/stackb/scala-gazelle/pkg/scalarule"
	mock "github.com/stretchr/testify/mock"
)

// ProviderRegistry is an autogenerated mock type for the ProviderRegistry type
type ProviderRegistry struct {
	mock.Mock
}

// LookupProvider provides a mock function with given fields: name
func (_m *ProviderRegistry) LookupProvider(name string) (scalarule.Provider, bool) {
	ret := _m.Called(name)

	var r0 scalarule.Provider
	if rf, ok := ret.Get(0).(func(string) scalarule.Provider); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scalarule.Provider)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ProviderNames provides a mock function with given fields:
func (_m *ProviderRegistry) ProviderNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// RegisterProvider provides a mock function with given fields: name, provider
func (_m *ProviderRegistry) RegisterProvider(name string, provider scalarule.Provider) error {
	ret := _m.Called(name, provider)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, scalarule.Provider) error); ok {
		r0 = rf(name, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProviderRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewProviderRegistry creates a new instance of ProviderRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderRegistry(t mockConstructorTestingTNewProviderRegistry) *ProviderRegistry {
	mock := &ProviderRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
