// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	flag "flag"

	config "github.com/bazelbuild/bazel-gazelle/config"

	label "github.com/bazelbuild/bazel-gazelle/label"

	mock "github.com/stretchr/testify/mock"

	resolver "github.com/stackb/scala-gazelle/pkg/resolver"

	rule "github.com/bazelbuild/bazel-gazelle/rule"
)

// KnownImportProvider is an autogenerated mock type for the KnownImportProvider type
type KnownImportProvider struct {
	mock.Mock
}

// CanProvide provides a mock function with given fields: dep, knownRule
func (_m *KnownImportProvider) CanProvide(dep label.Label, knownRule func(label.Label) (*rule.Rule, bool)) bool {
	ret := _m.Called(dep, knownRule)

	var r0 bool
	if rf, ok := ret.Get(0).(func(label.Label, func(label.Label) (*rule.Rule, bool)) bool); ok {
		r0 = rf(dep, knownRule)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckFlags provides a mock function with given fields: fs, c, registry
func (_m *KnownImportProvider) CheckFlags(fs *flag.FlagSet, c *config.Config, registry resolver.KnownImportRegistry) error {
	ret := _m.Called(fs, c, registry)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flag.FlagSet, *config.Config, resolver.KnownImportRegistry) error); ok {
		r0 = rf(fs, c, registry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *KnownImportProvider) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OnResolve provides a mock function with given fields:
func (_m *KnownImportProvider) OnResolve() {
	_m.Called()
}

// RegisterFlags provides a mock function with given fields: fs, cmd, c
func (_m *KnownImportProvider) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {
	_m.Called(fs, cmd, c)
}

type mockConstructorTestingTNewKnownImportProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewKnownImportProvider creates a new instance of KnownImportProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKnownImportProvider(t mockConstructorTestingTNewKnownImportProvider) *KnownImportProvider {
	mock := &KnownImportProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
