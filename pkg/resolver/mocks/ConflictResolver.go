// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	flag "flag"

	config "github.com/bazelbuild/bazel-gazelle/config"

	mock "github.com/stretchr/testify/mock"

	resolver "github.com/stackb/scala-gazelle/pkg/resolver"

	rule "github.com/bazelbuild/bazel-gazelle/rule"
)

// ConflictResolver is an autogenerated mock type for the ConflictResolver type
type ConflictResolver struct {
	mock.Mock
}

// CheckFlags provides a mock function with given fields: fs, c, scope
func (_m *ConflictResolver) CheckFlags(fs *flag.FlagSet, c *config.Config, scope resolver.Scope) error {
	ret := _m.Called(fs, c, scope)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flag.FlagSet, *config.Config, resolver.Scope) error); ok {
		r0 = rf(fs, c, scope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterFlags provides a mock function with given fields: fs, cmd, c
func (_m *ConflictResolver) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {
	_m.Called(fs, cmd, c)
}

// ResolveConflict provides a mock function with given fields: r, imports, symbol
func (_m *ConflictResolver) ResolveConflict(r *rule.Rule, imports resolver.ImportMap, symbol *resolver.Symbol) (*resolver.Symbol, bool) {
	ret := _m.Called(r, imports, symbol)

	var r0 *resolver.Symbol
	if rf, ok := ret.Get(0).(func(*rule.Rule, resolver.ImportMap, *resolver.Symbol) *resolver.Symbol); ok {
		r0 = rf(r, imports, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resolver.Symbol)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*rule.Rule, resolver.ImportMap, *resolver.Symbol) bool); ok {
		r1 = rf(r, imports, symbol)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

type mockConstructorTestingTNewConflictResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewConflictResolver creates a new instance of ConflictResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConflictResolver(t mockConstructorTestingTNewConflictResolver) *ConflictResolver {
	mock := &ConflictResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
