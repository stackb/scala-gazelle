// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	config "github.com/bazelbuild/bazel-gazelle/config"
	label "github.com/bazelbuild/bazel-gazelle/label"

	mock "github.com/stretchr/testify/mock"

	resolve "github.com/bazelbuild/bazel-gazelle/resolve"

	resolver "github.com/stackb/scala-gazelle/pkg/resolver"

	rule "github.com/bazelbuild/bazel-gazelle/rule"
)

// Universe is an autogenerated mock type for the Universe type
type Universe struct {
	mock.Mock
}

// AddSymbolProvider provides a mock function with given fields: provider
func (_m *Universe) AddSymbolProvider(provider resolver.SymbolProvider) error {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for AddSymbolProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(resolver.SymbolProvider) error); ok {
		r0 = rf(provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConflictResolver provides a mock function with given fields: name
func (_m *Universe) GetConflictResolver(name string) (resolver.ConflictResolver, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetConflictResolver")
	}

	var r0 resolver.ConflictResolver
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (resolver.ConflictResolver, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) resolver.ConflictResolver); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolver.ConflictResolver)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetDepsCleaner provides a mock function with given fields: name
func (_m *Universe) GetDepsCleaner(name string) (resolver.DepsCleaner, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetDepsCleaner")
	}

	var r0 resolver.DepsCleaner
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (resolver.DepsCleaner, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) resolver.DepsCleaner); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolver.DepsCleaner)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetKnownRule provides a mock function with given fields: from
func (_m *Universe) GetKnownRule(from label.Label) (*rule.Rule, bool) {
	ret := _m.Called(from)

	if len(ret) == 0 {
		panic("no return value specified for GetKnownRule")
	}

	var r0 *rule.Rule
	var r1 bool
	if rf, ok := ret.Get(0).(func(label.Label) (*rule.Rule, bool)); ok {
		return rf(from)
	}
	if rf, ok := ret.Get(0).(func(label.Label) *rule.Rule); ok {
		r0 = rf(from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rule.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(label.Label) bool); ok {
		r1 = rf(from)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetScope provides a mock function with given fields: name
func (_m *Universe) GetScope(name string) (resolver.Scope, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetScope")
	}

	var r0 resolver.Scope
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (resolver.Scope, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) resolver.Scope); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolver.Scope)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSymbol provides a mock function with given fields: name
func (_m *Universe) GetSymbol(name string) (*resolver.Symbol, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbol")
	}

	var r0 *resolver.Symbol
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*resolver.Symbol, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *resolver.Symbol); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resolver.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSymbols provides a mock function with given fields: prefix
func (_m *Universe) GetSymbols(prefix string) []*resolver.Symbol {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbols")
	}

	var r0 []*resolver.Symbol
	if rf, ok := ret.Get(0).(func(string) []*resolver.Symbol); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resolver.Symbol)
		}
	}

	return r0
}

// PutConflictResolver provides a mock function with given fields: name, r
func (_m *Universe) PutConflictResolver(name string, r resolver.ConflictResolver) error {
	ret := _m.Called(name, r)

	if len(ret) == 0 {
		panic("no return value specified for PutConflictResolver")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, resolver.ConflictResolver) error); ok {
		r0 = rf(name, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutDepsCleaner provides a mock function with given fields: name, r
func (_m *Universe) PutDepsCleaner(name string, r resolver.DepsCleaner) error {
	ret := _m.Called(name, r)

	if len(ret) == 0 {
		panic("no return value specified for PutDepsCleaner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, resolver.DepsCleaner) error); ok {
		r0 = rf(name, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutKnownRule provides a mock function with given fields: from, r
func (_m *Universe) PutKnownRule(from label.Label, r *rule.Rule) error {
	ret := _m.Called(from, r)

	if len(ret) == 0 {
		panic("no return value specified for PutKnownRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(label.Label, *rule.Rule) error); ok {
		r0 = rf(from, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutSymbol provides a mock function with given fields: known
func (_m *Universe) PutSymbol(known *resolver.Symbol) error {
	ret := _m.Called(known)

	if len(ret) == 0 {
		panic("no return value specified for PutSymbol")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*resolver.Symbol) error); ok {
		r0 = rf(known)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResolveSymbol provides a mock function with given fields: c, ix, from, lang, sym
func (_m *Universe) ResolveSymbol(c *config.Config, ix *resolve.RuleIndex, from label.Label, lang string, sym string) (*resolver.Symbol, bool) {
	ret := _m.Called(c, ix, from, lang, sym)

	if len(ret) == 0 {
		panic("no return value specified for ResolveSymbol")
	}

	var r0 *resolver.Symbol
	var r1 bool
	if rf, ok := ret.Get(0).(func(*config.Config, *resolve.RuleIndex, label.Label, string, string) (*resolver.Symbol, bool)); ok {
		return rf(c, ix, from, lang, sym)
	}
	if rf, ok := ret.Get(0).(func(*config.Config, *resolve.RuleIndex, label.Label, string, string) *resolver.Symbol); ok {
		r0 = rf(c, ix, from, lang, sym)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resolver.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(*config.Config, *resolve.RuleIndex, label.Label, string, string) bool); ok {
		r1 = rf(c, ix, from, lang, sym)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// String provides a mock function with no fields
func (_m *Universe) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SymbolProviders provides a mock function with no fields
func (_m *Universe) SymbolProviders() []resolver.SymbolProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SymbolProviders")
	}

	var r0 []resolver.SymbolProvider
	if rf, ok := ret.Get(0).(func() []resolver.SymbolProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resolver.SymbolProvider)
		}
	}

	return r0
}

// NewUniverse creates a new instance of Universe. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUniverse(t interface {
	mock.TestingT
	Cleanup(func())
}) *Universe {
	mock := &Universe{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
