// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	resolver "github.com/stackb/scala-gazelle/pkg/resolver"
	mock "github.com/stretchr/testify/mock"
)

// Scope is an autogenerated mock type for the Scope type
type Scope struct {
	mock.Mock
}

// GetScope provides a mock function with given fields: name
func (_m *Scope) GetScope(name string) (resolver.Scope, bool) {
	ret := _m.Called(name)

	var r0 resolver.Scope
	if rf, ok := ret.Get(0).(func(string) resolver.Scope); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolver.Scope)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSymbol provides a mock function with given fields: name
func (_m *Scope) GetSymbol(name string) (*resolver.Symbol, bool) {
	ret := _m.Called(name)

	var r0 *resolver.Symbol
	if rf, ok := ret.Get(0).(func(string) *resolver.Symbol); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resolver.Symbol)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSymbols provides a mock function with given fields: prefix
func (_m *Scope) GetSymbols(prefix string) []*resolver.Symbol {
	ret := _m.Called(prefix)

	var r0 []*resolver.Symbol
	if rf, ok := ret.Get(0).(func(string) []*resolver.Symbol); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resolver.Symbol)
		}
	}

	return r0
}

// PutSymbol provides a mock function with given fields: known
func (_m *Scope) PutSymbol(known *resolver.Symbol) error {
	ret := _m.Called(known)

	var r0 error
	if rf, ok := ret.Get(0).(func(*resolver.Symbol) error); ok {
		r0 = rf(known)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewScope interface {
	mock.TestingT
	Cleanup(func())
}

// NewScope creates a new instance of Scope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScope(t mockConstructorTestingTNewScope) *Scope {
	mock := &Scope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
