// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	resolver "github.com/stackb/scala-gazelle/pkg/resolver"
	mock "github.com/stretchr/testify/mock"
)

// KnownImportRegistry is an autogenerated mock type for the KnownImportRegistry type
type KnownImportRegistry struct {
	mock.Mock
}

// GetKnownImport provides a mock function with given fields: imp
func (_m *KnownImportRegistry) GetKnownImport(imp string) (*resolver.KnownImport, bool) {
	ret := _m.Called(imp)

	var r0 *resolver.KnownImport
	if rf, ok := ret.Get(0).(func(string) *resolver.KnownImport); ok {
		r0 = rf(imp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resolver.KnownImport)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(imp)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// PutKnownImport provides a mock function with given fields: known
func (_m *KnownImportRegistry) PutKnownImport(known *resolver.KnownImport) error {
	ret := _m.Called(known)

	var r0 error
	if rf, ok := ret.Get(0).(func(*resolver.KnownImport) error); ok {
		r0 = rf(known)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKnownImportRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewKnownImportRegistry creates a new instance of KnownImportRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKnownImportRegistry(t mockConstructorTestingTNewKnownImportRegistry) *KnownImportRegistry {
	mock := &KnownImportRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
