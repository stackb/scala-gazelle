load("@build_stack_scala_gazelle//rules:package_filegroup.bzl", "package_filegroup")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

# gazelle:exclude node_modules
# gazelle:exclude testdata

go_library(
    name = "parser",
    srcs = [
        "assets.go",
        "exec.go",
        "memo_parser.go",
        "parser.go",
        "scalameta_parser.go",
    ],
    embedsrcs = [
        "node_modules/scalameta-parsers/index.js",
        "node.exe",
        "scalameta_parser.mjs",
    ],
    importpath = "github.com/stackb/scala-gazelle/pkg/parser",
    visibility = ["//visibility:public"],
    deps = [
        "//build/stack/gazelle/scala/parse",
        "//pkg/bazel",
        "//pkg/collections",
        "//pkg/procutil",
        "@bazel_gazelle//label:go_default_library",
        "@com_github_amenzhinsky_go_memexec//:go-memexec",
        "@com_github_rs_zerolog//:zerolog",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//encoding/protojson",
    ],
)

go_test(
    name = "parser_test",
    srcs = [
        "assets_test.go",
        "exec_test.go",
        "scalameta_parser_test.go",
    ],
    data = glob(["testdata/**/*"]),
    embed = [":parser"],
    deps = [
        "//build/stack/gazelle/scala/parse",
        "//pkg/bazel",
        "//pkg/collections",
        "@bazel_gazelle//testtools:go_default_library",
        "@com_github_google_go_cmp//cmp",
        "@com_github_google_go_cmp//cmp/cmpopts",
    ],
)

genrule(
    name = "scalameta-parsers-module",
    srcs = ["@scalameta_parsers//:module"],
    outs = ["node_modules/scalameta-parsers/index.js"],
    cmd = "cp $(locations @scalameta_parsers//:module) $@",
)

genrule(
    name = "node_exe",
    srcs = select({
        "@bazel_tools//src/conditions:darwin_arm64": [
            "@node_bin_darwin-arm64//:node",
        ],
        "@bazel_tools//src/conditions:linux": [
            "@node_bin_linux-x64//:node",
        ],
        "@bazel_tools//src/conditions:windows_x64": [
            "@node_bin_win-x64//:node",
        ],
        "//conditions:default": [
            "@node_bin_darwin-x64//:node",
        ],
    }),
    outs = ["node.exe"],
    cmd = "cp $< $@",
    executable = True,
)

package_filegroup(
    name = "filegroup",
    srcs = [
        "BUILD.bazel",
        "assets.go",
        "assets_test.go",
        "exec.go",
        "exec_test.go",
        "memo_parser.go",
        "node.exe",
        "package.json",
        "parser.go",
        "scalameta_parser.go",
        "scalameta_parser.mjs",
        "scalameta_parser_test.go",
    ],
    visibility = ["//visibility:public"],
)
