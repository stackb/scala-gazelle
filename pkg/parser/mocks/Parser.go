// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	config "github.com/bazelbuild/bazel-gazelle/config"
	label "github.com/bazelbuild/bazel-gazelle/label"

	mock "github.com/stretchr/testify/mock"

	parse "github.com/stackb/scala-gazelle/build/stack/gazelle/scala/parse"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// LoadScalaRule provides a mock function with given fields: from, rule
func (_m *Parser) LoadScalaRule(from label.Label, rule *parse.Rule) error {
	ret := _m.Called(from, rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(label.Label, *parse.Rule) error); ok {
		r0 = rf(from, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseScalaRule provides a mock function with given fields: cfg, kind, from, dir, srcs
func (_m *Parser) ParseScalaRule(cfg *config.Config, kind string, from label.Label, dir string, srcs ...string) (*parse.Rule, error) {
	_va := make([]interface{}, len(srcs))
	for _i := range srcs {
		_va[_i] = srcs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cfg, kind, from, dir)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *parse.Rule
	if rf, ok := ret.Get(0).(func(*config.Config, string, label.Label, string, ...string) *parse.Rule); ok {
		r0 = rf(cfg, kind, from, dir, srcs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*parse.Rule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*config.Config, string, label.Label, string, ...string) error); ok {
		r1 = rf(cfg, kind, from, dir, srcs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParser(t mockConstructorTestingTNewParser) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
