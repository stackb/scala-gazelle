// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	label "github.com/bazelbuild/bazel-gazelle/label"
	mock "github.com/stretchr/testify/mock"

	parse "github.com/stackb/scala-gazelle/build/stack/gazelle/scala/parse"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// ParseScalaFiles provides a mock function with given fields: kind, from, dir, srcs
func (_m *Parser) ParseScalaFiles(kind string, from label.Label, dir string, srcs ...string) ([]*parse.File, error) {
	_va := make([]interface{}, len(srcs))
	for _i := range srcs {
		_va[_i] = srcs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, kind, from, dir)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*parse.File
	if rf, ok := ret.Get(0).(func(string, label.Label, string, ...string) []*parse.File); ok {
		r0 = rf(kind, from, dir, srcs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*parse.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, label.Label, string, ...string) error); ok {
		r1 = rf(kind, from, dir, srcs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParser(t mockConstructorTestingTNewParser) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
