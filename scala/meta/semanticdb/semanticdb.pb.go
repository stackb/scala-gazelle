// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.14.0
// source: scala/meta/semanticdb/semanticdb.proto

package semanticdb

import (
	_ "github.com/stackb/scala-gazelle/scalapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Schema int32

const (
	Schema_LEGACY      Schema = 0
	Schema_SEMANTICDB3 Schema = 3
	Schema_SEMANTICDB4 Schema = 4
)

// Enum value maps for Schema.
var (
	Schema_name = map[int32]string{
		0: "LEGACY",
		3: "SEMANTICDB3",
		4: "SEMANTICDB4",
	}
	Schema_value = map[string]int32{
		"LEGACY":      0,
		"SEMANTICDB3": 3,
		"SEMANTICDB4": 4,
	}
)

func (x Schema) Enum() *Schema {
	p := new(Schema)
	*p = x
	return p
}

func (x Schema) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema) Descriptor() protoreflect.EnumDescriptor {
	return file_scala_meta_semanticdb_semanticdb_proto_enumTypes[0].Descriptor()
}

func (Schema) Type() protoreflect.EnumType {
	return &file_scala_meta_semanticdb_semanticdb_proto_enumTypes[0]
}

func (x Schema) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema.Descriptor instead.
func (Schema) EnumDescriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{0}
}

type Language int32

const (
	Language_UNKNOWN_LANGUAGE Language = 0
	Language_SCALA            Language = 1
	Language_JAVA             Language = 2
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "UNKNOWN_LANGUAGE",
		1: "SCALA",
		2: "JAVA",
	}
	Language_value = map[string]int32{
		"UNKNOWN_LANGUAGE": 0,
		"SCALA":            1,
		"JAVA":             2,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_scala_meta_semanticdb_semanticdb_proto_enumTypes[1].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_scala_meta_semanticdb_semanticdb_proto_enumTypes[1]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{1}
}

type SymbolInformation_Kind int32

const (
	SymbolInformation_UNKNOWN_KIND   SymbolInformation_Kind = 0
	SymbolInformation_LOCAL          SymbolInformation_Kind = 19
	SymbolInformation_FIELD          SymbolInformation_Kind = 20
	SymbolInformation_METHOD         SymbolInformation_Kind = 3
	SymbolInformation_CONSTRUCTOR    SymbolInformation_Kind = 21
	SymbolInformation_MACRO          SymbolInformation_Kind = 6
	SymbolInformation_TYPE           SymbolInformation_Kind = 7
	SymbolInformation_PARAMETER      SymbolInformation_Kind = 8
	SymbolInformation_SELF_PARAMETER SymbolInformation_Kind = 17
	SymbolInformation_TYPE_PARAMETER SymbolInformation_Kind = 9
	SymbolInformation_OBJECT         SymbolInformation_Kind = 10
	SymbolInformation_PACKAGE        SymbolInformation_Kind = 11
	SymbolInformation_PACKAGE_OBJECT SymbolInformation_Kind = 12
	SymbolInformation_CLASS          SymbolInformation_Kind = 13
	SymbolInformation_TRAIT          SymbolInformation_Kind = 14
	SymbolInformation_INTERFACE      SymbolInformation_Kind = 18
)

// Enum value maps for SymbolInformation_Kind.
var (
	SymbolInformation_Kind_name = map[int32]string{
		0:  "UNKNOWN_KIND",
		19: "LOCAL",
		20: "FIELD",
		3:  "METHOD",
		21: "CONSTRUCTOR",
		6:  "MACRO",
		7:  "TYPE",
		8:  "PARAMETER",
		17: "SELF_PARAMETER",
		9:  "TYPE_PARAMETER",
		10: "OBJECT",
		11: "PACKAGE",
		12: "PACKAGE_OBJECT",
		13: "CLASS",
		14: "TRAIT",
		18: "INTERFACE",
	}
	SymbolInformation_Kind_value = map[string]int32{
		"UNKNOWN_KIND":   0,
		"LOCAL":          19,
		"FIELD":          20,
		"METHOD":         3,
		"CONSTRUCTOR":    21,
		"MACRO":          6,
		"TYPE":           7,
		"PARAMETER":      8,
		"SELF_PARAMETER": 17,
		"TYPE_PARAMETER": 9,
		"OBJECT":         10,
		"PACKAGE":        11,
		"PACKAGE_OBJECT": 12,
		"CLASS":          13,
		"TRAIT":          14,
		"INTERFACE":      18,
	}
)

func (x SymbolInformation_Kind) Enum() *SymbolInformation_Kind {
	p := new(SymbolInformation_Kind)
	*p = x
	return p
}

func (x SymbolInformation_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolInformation_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_scala_meta_semanticdb_semanticdb_proto_enumTypes[2].Descriptor()
}

func (SymbolInformation_Kind) Type() protoreflect.EnumType {
	return &file_scala_meta_semanticdb_semanticdb_proto_enumTypes[2]
}

func (x SymbolInformation_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolInformation_Kind.Descriptor instead.
func (SymbolInformation_Kind) EnumDescriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{39, 0}
}

type SymbolInformation_Property int32

const (
	SymbolInformation_UNKNOWN_PROPERTY SymbolInformation_Property = 0
	SymbolInformation_ABSTRACT         SymbolInformation_Property = 4
	SymbolInformation_FINAL            SymbolInformation_Property = 8
	SymbolInformation_SEALED           SymbolInformation_Property = 16
	SymbolInformation_IMPLICIT         SymbolInformation_Property = 32
	SymbolInformation_LAZY             SymbolInformation_Property = 64
	SymbolInformation_CASE             SymbolInformation_Property = 128
	SymbolInformation_COVARIANT        SymbolInformation_Property = 256
	SymbolInformation_CONTRAVARIANT    SymbolInformation_Property = 512
	SymbolInformation_VAL              SymbolInformation_Property = 1024
	SymbolInformation_VAR              SymbolInformation_Property = 2048
	SymbolInformation_STATIC           SymbolInformation_Property = 4096
	SymbolInformation_PRIMARY          SymbolInformation_Property = 8192
	SymbolInformation_ENUM             SymbolInformation_Property = 16384
	SymbolInformation_DEFAULT          SymbolInformation_Property = 32768
	SymbolInformation_GIVEN            SymbolInformation_Property = 65536
	SymbolInformation_INLINE           SymbolInformation_Property = 131072
	SymbolInformation_OPEN             SymbolInformation_Property = 262144
	SymbolInformation_TRANSPARENT      SymbolInformation_Property = 524288
	SymbolInformation_INFIX            SymbolInformation_Property = 1048576
	SymbolInformation_OPAQUE           SymbolInformation_Property = 2097152
)

// Enum value maps for SymbolInformation_Property.
var (
	SymbolInformation_Property_name = map[int32]string{
		0:       "UNKNOWN_PROPERTY",
		4:       "ABSTRACT",
		8:       "FINAL",
		16:      "SEALED",
		32:      "IMPLICIT",
		64:      "LAZY",
		128:     "CASE",
		256:     "COVARIANT",
		512:     "CONTRAVARIANT",
		1024:    "VAL",
		2048:    "VAR",
		4096:    "STATIC",
		8192:    "PRIMARY",
		16384:   "ENUM",
		32768:   "DEFAULT",
		65536:   "GIVEN",
		131072:  "INLINE",
		262144:  "OPEN",
		524288:  "TRANSPARENT",
		1048576: "INFIX",
		2097152: "OPAQUE",
	}
	SymbolInformation_Property_value = map[string]int32{
		"UNKNOWN_PROPERTY": 0,
		"ABSTRACT":         4,
		"FINAL":            8,
		"SEALED":           16,
		"IMPLICIT":         32,
		"LAZY":             64,
		"CASE":             128,
		"COVARIANT":        256,
		"CONTRAVARIANT":    512,
		"VAL":              1024,
		"VAR":              2048,
		"STATIC":           4096,
		"PRIMARY":          8192,
		"ENUM":             16384,
		"DEFAULT":          32768,
		"GIVEN":            65536,
		"INLINE":           131072,
		"OPEN":             262144,
		"TRANSPARENT":      524288,
		"INFIX":            1048576,
		"OPAQUE":           2097152,
	}
)

func (x SymbolInformation_Property) Enum() *SymbolInformation_Property {
	p := new(SymbolInformation_Property)
	*p = x
	return p
}

func (x SymbolInformation_Property) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolInformation_Property) Descriptor() protoreflect.EnumDescriptor {
	return file_scala_meta_semanticdb_semanticdb_proto_enumTypes[3].Descriptor()
}

func (SymbolInformation_Property) Type() protoreflect.EnumType {
	return &file_scala_meta_semanticdb_semanticdb_proto_enumTypes[3]
}

func (x SymbolInformation_Property) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolInformation_Property.Descriptor instead.
func (SymbolInformation_Property) EnumDescriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{39, 1}
}

type Documentation_Format int32

const (
	Documentation_HTML     Documentation_Format = 0
	Documentation_MARKDOWN Documentation_Format = 1
	Documentation_JAVADOC  Documentation_Format = 2
	Documentation_SCALADOC Documentation_Format = 3
	Documentation_KDOC     Documentation_Format = 4
)

// Enum value maps for Documentation_Format.
var (
	Documentation_Format_name = map[int32]string{
		0: "HTML",
		1: "MARKDOWN",
		2: "JAVADOC",
		3: "SCALADOC",
		4: "KDOC",
	}
	Documentation_Format_value = map[string]int32{
		"HTML":     0,
		"MARKDOWN": 1,
		"JAVADOC":  2,
		"SCALADOC": 3,
		"KDOC":     4,
	}
)

func (x Documentation_Format) Enum() *Documentation_Format {
	p := new(Documentation_Format)
	*p = x
	return p
}

func (x Documentation_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Documentation_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_scala_meta_semanticdb_semanticdb_proto_enumTypes[4].Descriptor()
}

func (Documentation_Format) Type() protoreflect.EnumType {
	return &file_scala_meta_semanticdb_semanticdb_proto_enumTypes[4]
}

func (x Documentation_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Documentation_Format.Descriptor instead.
func (Documentation_Format) EnumDescriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{40, 0}
}

type SymbolOccurrence_Role int32

const (
	SymbolOccurrence_UNKNOWN_ROLE SymbolOccurrence_Role = 0
	SymbolOccurrence_REFERENCE    SymbolOccurrence_Role = 1
	SymbolOccurrence_DEFINITION   SymbolOccurrence_Role = 2
)

// Enum value maps for SymbolOccurrence_Role.
var (
	SymbolOccurrence_Role_name = map[int32]string{
		0: "UNKNOWN_ROLE",
		1: "REFERENCE",
		2: "DEFINITION",
	}
	SymbolOccurrence_Role_value = map[string]int32{
		"UNKNOWN_ROLE": 0,
		"REFERENCE":    1,
		"DEFINITION":   2,
	}
)

func (x SymbolOccurrence_Role) Enum() *SymbolOccurrence_Role {
	p := new(SymbolOccurrence_Role)
	*p = x
	return p
}

func (x SymbolOccurrence_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolOccurrence_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_scala_meta_semanticdb_semanticdb_proto_enumTypes[5].Descriptor()
}

func (SymbolOccurrence_Role) Type() protoreflect.EnumType {
	return &file_scala_meta_semanticdb_semanticdb_proto_enumTypes[5]
}

func (x SymbolOccurrence_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolOccurrence_Role.Descriptor instead.
func (SymbolOccurrence_Role) EnumDescriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{50, 0}
}

type Diagnostic_Severity int32

const (
	Diagnostic_UNKNOWN_SEVERITY Diagnostic_Severity = 0
	Diagnostic_ERROR            Diagnostic_Severity = 1
	Diagnostic_WARNING          Diagnostic_Severity = 2
	Diagnostic_INFORMATION      Diagnostic_Severity = 3
	Diagnostic_HINT             Diagnostic_Severity = 4
)

// Enum value maps for Diagnostic_Severity.
var (
	Diagnostic_Severity_name = map[int32]string{
		0: "UNKNOWN_SEVERITY",
		1: "ERROR",
		2: "WARNING",
		3: "INFORMATION",
		4: "HINT",
	}
	Diagnostic_Severity_value = map[string]int32{
		"UNKNOWN_SEVERITY": 0,
		"ERROR":            1,
		"WARNING":          2,
		"INFORMATION":      3,
		"HINT":             4,
	}
)

func (x Diagnostic_Severity) Enum() *Diagnostic_Severity {
	p := new(Diagnostic_Severity)
	*p = x
	return p
}

func (x Diagnostic_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Diagnostic_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_scala_meta_semanticdb_semanticdb_proto_enumTypes[6].Descriptor()
}

func (Diagnostic_Severity) Type() protoreflect.EnumType {
	return &file_scala_meta_semanticdb_semanticdb_proto_enumTypes[6]
}

func (x Diagnostic_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Diagnostic_Severity.Descriptor instead.
func (Diagnostic_Severity) EnumDescriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{51, 0}
}

type TextDocuments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*TextDocument `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *TextDocuments) Reset() {
	*x = TextDocuments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocuments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocuments) ProtoMessage() {}

func (x *TextDocuments) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocuments.ProtoReflect.Descriptor instead.
func (*TextDocuments) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{0}
}

func (x *TextDocuments) GetDocuments() []*TextDocument {
	if x != nil {
		return x.Documents
	}
	return nil
}

type TextDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema      Schema               `protobuf:"varint,1,opt,name=schema,proto3,enum=scala.meta.semanticdb.Schema" json:"schema,omitempty"`
	Uri         string               `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Text        string               `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Md5         string               `protobuf:"bytes,11,opt,name=md5,proto3" json:"md5,omitempty"`
	Language    Language             `protobuf:"varint,10,opt,name=language,proto3,enum=scala.meta.semanticdb.Language" json:"language,omitempty"`
	Symbols     []*SymbolInformation `protobuf:"bytes,5,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Occurrences []*SymbolOccurrence  `protobuf:"bytes,6,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	Diagnostics []*Diagnostic        `protobuf:"bytes,7,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	Synthetics  []*Synthetic         `protobuf:"bytes,12,rep,name=synthetics,proto3" json:"synthetics,omitempty"`
}

func (x *TextDocument) Reset() {
	*x = TextDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocument) ProtoMessage() {}

func (x *TextDocument) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocument.ProtoReflect.Descriptor instead.
func (*TextDocument) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{1}
}

func (x *TextDocument) GetSchema() Schema {
	if x != nil {
		return x.Schema
	}
	return Schema_LEGACY
}

func (x *TextDocument) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *TextDocument) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextDocument) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *TextDocument) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_UNKNOWN_LANGUAGE
}

func (x *TextDocument) GetSymbols() []*SymbolInformation {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *TextDocument) GetOccurrences() []*SymbolOccurrence {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

func (x *TextDocument) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *TextDocument) GetSynthetics() []*Synthetic {
	if x != nil {
		return x.Synthetics
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine      int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	StartCharacter int32 `protobuf:"varint,2,opt,name=start_character,json=startCharacter,proto3" json:"start_character,omitempty"`
	EndLine        int32 `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	EndCharacter   int32 `protobuf:"varint,4,opt,name=end_character,json=endCharacter,proto3" json:"end_character,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{2}
}

func (x *Range) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Range) GetStartCharacter() int32 {
	if x != nil {
		return x.StartCharacter
	}
	return 0
}

func (x *Range) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Range) GetEndCharacter() int32 {
	if x != nil {
		return x.EndCharacter
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri   string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Location) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symlinks  []string             `protobuf:"bytes,1,rep,name=symlinks,proto3" json:"symlinks,omitempty"`
	Hardlinks []*SymbolInformation `protobuf:"bytes,2,rep,name=hardlinks,proto3" json:"hardlinks,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{4}
}

func (x *Scope) GetSymlinks() []string {
	if x != nil {
		return x.Symlinks
	}
	return nil
}

func (x *Scope) GetHardlinks() []*SymbolInformation {
	if x != nil {
		return x.Hardlinks
	}
	return nil
}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SealedValue:
	//	*Type_TypeRef
	//	*Type_SingleType
	//	*Type_ThisType
	//	*Type_SuperType
	//	*Type_ConstantType
	//	*Type_IntersectionType
	//	*Type_UnionType
	//	*Type_WithType
	//	*Type_StructuralType
	//	*Type_AnnotatedType
	//	*Type_ExistentialType
	//	*Type_UniversalType
	//	*Type_ByNameType
	//	*Type_RepeatedType
	//	*Type_MatchType
	//	*Type_LambdaType
	SealedValue isType_SealedValue `protobuf_oneof:"sealed_value"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{5}
}

func (m *Type) GetSealedValue() isType_SealedValue {
	if m != nil {
		return m.SealedValue
	}
	return nil
}

func (x *Type) GetTypeRef() *TypeRef {
	if x, ok := x.GetSealedValue().(*Type_TypeRef); ok {
		return x.TypeRef
	}
	return nil
}

func (x *Type) GetSingleType() *SingleType {
	if x, ok := x.GetSealedValue().(*Type_SingleType); ok {
		return x.SingleType
	}
	return nil
}

func (x *Type) GetThisType() *ThisType {
	if x, ok := x.GetSealedValue().(*Type_ThisType); ok {
		return x.ThisType
	}
	return nil
}

func (x *Type) GetSuperType() *SuperType {
	if x, ok := x.GetSealedValue().(*Type_SuperType); ok {
		return x.SuperType
	}
	return nil
}

func (x *Type) GetConstantType() *ConstantType {
	if x, ok := x.GetSealedValue().(*Type_ConstantType); ok {
		return x.ConstantType
	}
	return nil
}

func (x *Type) GetIntersectionType() *IntersectionType {
	if x, ok := x.GetSealedValue().(*Type_IntersectionType); ok {
		return x.IntersectionType
	}
	return nil
}

func (x *Type) GetUnionType() *UnionType {
	if x, ok := x.GetSealedValue().(*Type_UnionType); ok {
		return x.UnionType
	}
	return nil
}

func (x *Type) GetWithType() *WithType {
	if x, ok := x.GetSealedValue().(*Type_WithType); ok {
		return x.WithType
	}
	return nil
}

func (x *Type) GetStructuralType() *StructuralType {
	if x, ok := x.GetSealedValue().(*Type_StructuralType); ok {
		return x.StructuralType
	}
	return nil
}

func (x *Type) GetAnnotatedType() *AnnotatedType {
	if x, ok := x.GetSealedValue().(*Type_AnnotatedType); ok {
		return x.AnnotatedType
	}
	return nil
}

func (x *Type) GetExistentialType() *ExistentialType {
	if x, ok := x.GetSealedValue().(*Type_ExistentialType); ok {
		return x.ExistentialType
	}
	return nil
}

func (x *Type) GetUniversalType() *UniversalType {
	if x, ok := x.GetSealedValue().(*Type_UniversalType); ok {
		return x.UniversalType
	}
	return nil
}

func (x *Type) GetByNameType() *ByNameType {
	if x, ok := x.GetSealedValue().(*Type_ByNameType); ok {
		return x.ByNameType
	}
	return nil
}

func (x *Type) GetRepeatedType() *RepeatedType {
	if x, ok := x.GetSealedValue().(*Type_RepeatedType); ok {
		return x.RepeatedType
	}
	return nil
}

func (x *Type) GetMatchType() *MatchType {
	if x, ok := x.GetSealedValue().(*Type_MatchType); ok {
		return x.MatchType
	}
	return nil
}

func (x *Type) GetLambdaType() *LambdaType {
	if x, ok := x.GetSealedValue().(*Type_LambdaType); ok {
		return x.LambdaType
	}
	return nil
}

type isType_SealedValue interface {
	isType_SealedValue()
}

type Type_TypeRef struct {
	TypeRef *TypeRef `protobuf:"bytes,2,opt,name=type_ref,json=typeRef,proto3,oneof"`
}

type Type_SingleType struct {
	SingleType *SingleType `protobuf:"bytes,20,opt,name=single_type,json=singleType,proto3,oneof"`
}

type Type_ThisType struct {
	ThisType *ThisType `protobuf:"bytes,21,opt,name=this_type,json=thisType,proto3,oneof"`
}

type Type_SuperType struct {
	SuperType *SuperType `protobuf:"bytes,22,opt,name=super_type,json=superType,proto3,oneof"`
}

type Type_ConstantType struct {
	ConstantType *ConstantType `protobuf:"bytes,23,opt,name=constant_type,json=constantType,proto3,oneof"`
}

type Type_IntersectionType struct {
	IntersectionType *IntersectionType `protobuf:"bytes,17,opt,name=intersection_type,json=intersectionType,proto3,oneof"`
}

type Type_UnionType struct {
	UnionType *UnionType `protobuf:"bytes,18,opt,name=union_type,json=unionType,proto3,oneof"`
}

type Type_WithType struct {
	WithType *WithType `protobuf:"bytes,19,opt,name=with_type,json=withType,proto3,oneof"`
}

type Type_StructuralType struct {
	StructuralType *StructuralType `protobuf:"bytes,7,opt,name=structural_type,json=structuralType,proto3,oneof"`
}

type Type_AnnotatedType struct {
	AnnotatedType *AnnotatedType `protobuf:"bytes,8,opt,name=annotated_type,json=annotatedType,proto3,oneof"`
}

type Type_ExistentialType struct {
	ExistentialType *ExistentialType `protobuf:"bytes,9,opt,name=existential_type,json=existentialType,proto3,oneof"`
}

type Type_UniversalType struct {
	UniversalType *UniversalType `protobuf:"bytes,10,opt,name=universal_type,json=universalType,proto3,oneof"`
}

type Type_ByNameType struct {
	ByNameType *ByNameType `protobuf:"bytes,13,opt,name=by_name_type,json=byNameType,proto3,oneof"`
}

type Type_RepeatedType struct {
	RepeatedType *RepeatedType `protobuf:"bytes,14,opt,name=repeated_type,json=repeatedType,proto3,oneof"`
}

type Type_MatchType struct {
	MatchType *MatchType `protobuf:"bytes,25,opt,name=match_type,json=matchType,proto3,oneof"`
}

type Type_LambdaType struct {
	LambdaType *LambdaType `protobuf:"bytes,26,opt,name=lambda_type,json=lambdaType,proto3,oneof"`
}

func (*Type_TypeRef) isType_SealedValue() {}

func (*Type_SingleType) isType_SealedValue() {}

func (*Type_ThisType) isType_SealedValue() {}

func (*Type_SuperType) isType_SealedValue() {}

func (*Type_ConstantType) isType_SealedValue() {}

func (*Type_IntersectionType) isType_SealedValue() {}

func (*Type_UnionType) isType_SealedValue() {}

func (*Type_WithType) isType_SealedValue() {}

func (*Type_StructuralType) isType_SealedValue() {}

func (*Type_AnnotatedType) isType_SealedValue() {}

func (*Type_ExistentialType) isType_SealedValue() {}

func (*Type_UniversalType) isType_SealedValue() {}

func (*Type_ByNameType) isType_SealedValue() {}

func (*Type_RepeatedType) isType_SealedValue() {}

func (*Type_MatchType) isType_SealedValue() {}

func (*Type_LambdaType) isType_SealedValue() {}

type LambdaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *Scope `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	ReturnType *Type  `protobuf:"bytes,2,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
}

func (x *LambdaType) Reset() {
	*x = LambdaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LambdaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LambdaType) ProtoMessage() {}

func (x *LambdaType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LambdaType.ProtoReflect.Descriptor instead.
func (*LambdaType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{6}
}

func (x *LambdaType) GetParameters() *Scope {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *LambdaType) GetReturnType() *Type {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

type TypeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix        *Type   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Symbol        string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TypeArguments []*Type `protobuf:"bytes,3,rep,name=type_arguments,json=typeArguments,proto3" json:"type_arguments,omitempty"`
}

func (x *TypeRef) Reset() {
	*x = TypeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRef) ProtoMessage() {}

func (x *TypeRef) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRef.ProtoReflect.Descriptor instead.
func (*TypeRef) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{7}
}

func (x *TypeRef) GetPrefix() *Type {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *TypeRef) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TypeRef) GetTypeArguments() []*Type {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

type SingleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix *Type  `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *SingleType) Reset() {
	*x = SingleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleType) ProtoMessage() {}

func (x *SingleType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleType.ProtoReflect.Descriptor instead.
func (*SingleType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{8}
}

func (x *SingleType) GetPrefix() *Type {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SingleType) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type ThisType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *ThisType) Reset() {
	*x = ThisType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThisType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThisType) ProtoMessage() {}

func (x *ThisType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThisType.ProtoReflect.Descriptor instead.
func (*ThisType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{9}
}

func (x *ThisType) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SuperType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix *Type  `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *SuperType) Reset() {
	*x = SuperType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperType) ProtoMessage() {}

func (x *SuperType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperType.ProtoReflect.Descriptor instead.
func (*SuperType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{10}
}

func (x *SuperType) GetPrefix() *Type {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SuperType) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type ConstantType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constant *Constant `protobuf:"bytes,1,opt,name=constant,proto3" json:"constant,omitempty"`
}

func (x *ConstantType) Reset() {
	*x = ConstantType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstantType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantType) ProtoMessage() {}

func (x *ConstantType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantType.ProtoReflect.Descriptor instead.
func (*ConstantType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{11}
}

func (x *ConstantType) GetConstant() *Constant {
	if x != nil {
		return x.Constant
	}
	return nil
}

type IntersectionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*Type `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *IntersectionType) Reset() {
	*x = IntersectionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntersectionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntersectionType) ProtoMessage() {}

func (x *IntersectionType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntersectionType.ProtoReflect.Descriptor instead.
func (*IntersectionType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{12}
}

func (x *IntersectionType) GetTypes() []*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

type UnionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*Type `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *UnionType) Reset() {
	*x = UnionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionType) ProtoMessage() {}

func (x *UnionType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionType.ProtoReflect.Descriptor instead.
func (*UnionType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{13}
}

func (x *UnionType) GetTypes() []*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

type WithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*Type `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *WithType) Reset() {
	*x = WithType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithType) ProtoMessage() {}

func (x *WithType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithType.ProtoReflect.Descriptor instead.
func (*WithType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{14}
}

func (x *WithType) GetTypes() []*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

type StructuralType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpe          *Type  `protobuf:"bytes,4,opt,name=tpe,proto3" json:"tpe,omitempty"`
	Declarations *Scope `protobuf:"bytes,5,opt,name=declarations,proto3" json:"declarations,omitempty"`
}

func (x *StructuralType) Reset() {
	*x = StructuralType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuralType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuralType) ProtoMessage() {}

func (x *StructuralType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuralType.ProtoReflect.Descriptor instead.
func (*StructuralType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{15}
}

func (x *StructuralType) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

func (x *StructuralType) GetDeclarations() *Scope {
	if x != nil {
		return x.Declarations
	}
	return nil
}

type AnnotatedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations []*Annotation `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Tpe         *Type         `protobuf:"bytes,1,opt,name=tpe,proto3" json:"tpe,omitempty"`
}

func (x *AnnotatedType) Reset() {
	*x = AnnotatedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedType) ProtoMessage() {}

func (x *AnnotatedType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedType.ProtoReflect.Descriptor instead.
func (*AnnotatedType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{16}
}

func (x *AnnotatedType) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *AnnotatedType) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

type ExistentialType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpe          *Type  `protobuf:"bytes,1,opt,name=tpe,proto3" json:"tpe,omitempty"`
	Declarations *Scope `protobuf:"bytes,3,opt,name=declarations,proto3" json:"declarations,omitempty"`
}

func (x *ExistentialType) Reset() {
	*x = ExistentialType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistentialType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistentialType) ProtoMessage() {}

func (x *ExistentialType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistentialType.ProtoReflect.Descriptor instead.
func (*ExistentialType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{17}
}

func (x *ExistentialType) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

func (x *ExistentialType) GetDeclarations() *Scope {
	if x != nil {
		return x.Declarations
	}
	return nil
}

type UniversalType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeParameters *Scope `protobuf:"bytes,3,opt,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	Tpe            *Type  `protobuf:"bytes,2,opt,name=tpe,proto3" json:"tpe,omitempty"`
}

func (x *UniversalType) Reset() {
	*x = UniversalType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalType) ProtoMessage() {}

func (x *UniversalType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalType.ProtoReflect.Descriptor instead.
func (*UniversalType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{18}
}

func (x *UniversalType) GetTypeParameters() *Scope {
	if x != nil {
		return x.TypeParameters
	}
	return nil
}

func (x *UniversalType) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

type ByNameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpe *Type `protobuf:"bytes,1,opt,name=tpe,proto3" json:"tpe,omitempty"`
}

func (x *ByNameType) Reset() {
	*x = ByNameType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByNameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByNameType) ProtoMessage() {}

func (x *ByNameType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByNameType.ProtoReflect.Descriptor instead.
func (*ByNameType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{19}
}

func (x *ByNameType) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

type RepeatedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpe *Type `protobuf:"bytes,1,opt,name=tpe,proto3" json:"tpe,omitempty"`
}

func (x *RepeatedType) Reset() {
	*x = RepeatedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedType) ProtoMessage() {}

func (x *RepeatedType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedType.ProtoReflect.Descriptor instead.
func (*RepeatedType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{20}
}

func (x *RepeatedType) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

type MatchType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scrutinee *Type                 `protobuf:"bytes,1,opt,name=scrutinee,proto3" json:"scrutinee,omitempty"`
	Cases     []*MatchType_CaseType `protobuf:"bytes,2,rep,name=cases,proto3" json:"cases,omitempty"`
}

func (x *MatchType) Reset() {
	*x = MatchType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchType) ProtoMessage() {}

func (x *MatchType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchType.ProtoReflect.Descriptor instead.
func (*MatchType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{21}
}

func (x *MatchType) GetScrutinee() *Type {
	if x != nil {
		return x.Scrutinee
	}
	return nil
}

func (x *MatchType) GetCases() []*MatchType_CaseType {
	if x != nil {
		return x.Cases
	}
	return nil
}

type Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SealedValue:
	//	*Constant_UnitConstant
	//	*Constant_BooleanConstant
	//	*Constant_ByteConstant
	//	*Constant_ShortConstant
	//	*Constant_CharConstant
	//	*Constant_IntConstant
	//	*Constant_LongConstant
	//	*Constant_FloatConstant
	//	*Constant_DoubleConstant
	//	*Constant_StringConstant
	//	*Constant_NullConstant
	SealedValue isConstant_SealedValue `protobuf_oneof:"sealed_value"`
}

func (x *Constant) Reset() {
	*x = Constant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant) ProtoMessage() {}

func (x *Constant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant.ProtoReflect.Descriptor instead.
func (*Constant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{22}
}

func (m *Constant) GetSealedValue() isConstant_SealedValue {
	if m != nil {
		return m.SealedValue
	}
	return nil
}

func (x *Constant) GetUnitConstant() *UnitConstant {
	if x, ok := x.GetSealedValue().(*Constant_UnitConstant); ok {
		return x.UnitConstant
	}
	return nil
}

func (x *Constant) GetBooleanConstant() *BooleanConstant {
	if x, ok := x.GetSealedValue().(*Constant_BooleanConstant); ok {
		return x.BooleanConstant
	}
	return nil
}

func (x *Constant) GetByteConstant() *ByteConstant {
	if x, ok := x.GetSealedValue().(*Constant_ByteConstant); ok {
		return x.ByteConstant
	}
	return nil
}

func (x *Constant) GetShortConstant() *ShortConstant {
	if x, ok := x.GetSealedValue().(*Constant_ShortConstant); ok {
		return x.ShortConstant
	}
	return nil
}

func (x *Constant) GetCharConstant() *CharConstant {
	if x, ok := x.GetSealedValue().(*Constant_CharConstant); ok {
		return x.CharConstant
	}
	return nil
}

func (x *Constant) GetIntConstant() *IntConstant {
	if x, ok := x.GetSealedValue().(*Constant_IntConstant); ok {
		return x.IntConstant
	}
	return nil
}

func (x *Constant) GetLongConstant() *LongConstant {
	if x, ok := x.GetSealedValue().(*Constant_LongConstant); ok {
		return x.LongConstant
	}
	return nil
}

func (x *Constant) GetFloatConstant() *FloatConstant {
	if x, ok := x.GetSealedValue().(*Constant_FloatConstant); ok {
		return x.FloatConstant
	}
	return nil
}

func (x *Constant) GetDoubleConstant() *DoubleConstant {
	if x, ok := x.GetSealedValue().(*Constant_DoubleConstant); ok {
		return x.DoubleConstant
	}
	return nil
}

func (x *Constant) GetStringConstant() *StringConstant {
	if x, ok := x.GetSealedValue().(*Constant_StringConstant); ok {
		return x.StringConstant
	}
	return nil
}

func (x *Constant) GetNullConstant() *NullConstant {
	if x, ok := x.GetSealedValue().(*Constant_NullConstant); ok {
		return x.NullConstant
	}
	return nil
}

type isConstant_SealedValue interface {
	isConstant_SealedValue()
}

type Constant_UnitConstant struct {
	UnitConstant *UnitConstant `protobuf:"bytes,1,opt,name=unit_constant,json=unitConstant,proto3,oneof"`
}

type Constant_BooleanConstant struct {
	BooleanConstant *BooleanConstant `protobuf:"bytes,2,opt,name=boolean_constant,json=booleanConstant,proto3,oneof"`
}

type Constant_ByteConstant struct {
	ByteConstant *ByteConstant `protobuf:"bytes,3,opt,name=byte_constant,json=byteConstant,proto3,oneof"`
}

type Constant_ShortConstant struct {
	ShortConstant *ShortConstant `protobuf:"bytes,4,opt,name=short_constant,json=shortConstant,proto3,oneof"`
}

type Constant_CharConstant struct {
	CharConstant *CharConstant `protobuf:"bytes,5,opt,name=char_constant,json=charConstant,proto3,oneof"`
}

type Constant_IntConstant struct {
	IntConstant *IntConstant `protobuf:"bytes,6,opt,name=int_constant,json=intConstant,proto3,oneof"`
}

type Constant_LongConstant struct {
	LongConstant *LongConstant `protobuf:"bytes,7,opt,name=long_constant,json=longConstant,proto3,oneof"`
}

type Constant_FloatConstant struct {
	FloatConstant *FloatConstant `protobuf:"bytes,8,opt,name=float_constant,json=floatConstant,proto3,oneof"`
}

type Constant_DoubleConstant struct {
	DoubleConstant *DoubleConstant `protobuf:"bytes,9,opt,name=double_constant,json=doubleConstant,proto3,oneof"`
}

type Constant_StringConstant struct {
	StringConstant *StringConstant `protobuf:"bytes,10,opt,name=string_constant,json=stringConstant,proto3,oneof"`
}

type Constant_NullConstant struct {
	NullConstant *NullConstant `protobuf:"bytes,11,opt,name=null_constant,json=nullConstant,proto3,oneof"`
}

func (*Constant_UnitConstant) isConstant_SealedValue() {}

func (*Constant_BooleanConstant) isConstant_SealedValue() {}

func (*Constant_ByteConstant) isConstant_SealedValue() {}

func (*Constant_ShortConstant) isConstant_SealedValue() {}

func (*Constant_CharConstant) isConstant_SealedValue() {}

func (*Constant_IntConstant) isConstant_SealedValue() {}

func (*Constant_LongConstant) isConstant_SealedValue() {}

func (*Constant_FloatConstant) isConstant_SealedValue() {}

func (*Constant_DoubleConstant) isConstant_SealedValue() {}

func (*Constant_StringConstant) isConstant_SealedValue() {}

func (*Constant_NullConstant) isConstant_SealedValue() {}

type UnitConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnitConstant) Reset() {
	*x = UnitConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitConstant) ProtoMessage() {}

func (x *UnitConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitConstant.ProtoReflect.Descriptor instead.
func (*UnitConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{23}
}

type BooleanConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanConstant) Reset() {
	*x = BooleanConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanConstant) ProtoMessage() {}

func (x *BooleanConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanConstant.ProtoReflect.Descriptor instead.
func (*BooleanConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{24}
}

func (x *BooleanConstant) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type ByteConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ByteConstant) Reset() {
	*x = ByteConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteConstant) ProtoMessage() {}

func (x *ByteConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteConstant.ProtoReflect.Descriptor instead.
func (*ByteConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{25}
}

func (x *ByteConstant) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ShortConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ShortConstant) Reset() {
	*x = ShortConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortConstant) ProtoMessage() {}

func (x *ShortConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortConstant.ProtoReflect.Descriptor instead.
func (*ShortConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{26}
}

func (x *ShortConstant) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CharConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CharConstant) Reset() {
	*x = CharConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharConstant) ProtoMessage() {}

func (x *CharConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharConstant.ProtoReflect.Descriptor instead.
func (*CharConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{27}
}

func (x *CharConstant) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type IntConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntConstant) Reset() {
	*x = IntConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntConstant) ProtoMessage() {}

func (x *IntConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntConstant.ProtoReflect.Descriptor instead.
func (*IntConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{28}
}

func (x *IntConstant) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LongConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LongConstant) Reset() {
	*x = LongConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongConstant) ProtoMessage() {}

func (x *LongConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongConstant.ProtoReflect.Descriptor instead.
func (*LongConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{29}
}

func (x *LongConstant) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FloatConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FloatConstant) Reset() {
	*x = FloatConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatConstant) ProtoMessage() {}

func (x *FloatConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatConstant.ProtoReflect.Descriptor instead.
func (*FloatConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{30}
}

func (x *FloatConstant) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DoubleConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleConstant) Reset() {
	*x = DoubleConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleConstant) ProtoMessage() {}

func (x *DoubleConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleConstant.ProtoReflect.Descriptor instead.
func (*DoubleConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{31}
}

func (x *DoubleConstant) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StringConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringConstant) Reset() {
	*x = StringConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringConstant) ProtoMessage() {}

func (x *StringConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringConstant.ProtoReflect.Descriptor instead.
func (*StringConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{32}
}

func (x *StringConstant) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NullConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NullConstant) Reset() {
	*x = NullConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullConstant) ProtoMessage() {}

func (x *NullConstant) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullConstant.ProtoReflect.Descriptor instead.
func (*NullConstant) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{33}
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SealedValue:
	//	*Signature_ClassSignature
	//	*Signature_MethodSignature
	//	*Signature_TypeSignature
	//	*Signature_ValueSignature
	SealedValue isSignature_SealedValue `protobuf_oneof:"sealed_value"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{34}
}

func (m *Signature) GetSealedValue() isSignature_SealedValue {
	if m != nil {
		return m.SealedValue
	}
	return nil
}

func (x *Signature) GetClassSignature() *ClassSignature {
	if x, ok := x.GetSealedValue().(*Signature_ClassSignature); ok {
		return x.ClassSignature
	}
	return nil
}

func (x *Signature) GetMethodSignature() *MethodSignature {
	if x, ok := x.GetSealedValue().(*Signature_MethodSignature); ok {
		return x.MethodSignature
	}
	return nil
}

func (x *Signature) GetTypeSignature() *TypeSignature {
	if x, ok := x.GetSealedValue().(*Signature_TypeSignature); ok {
		return x.TypeSignature
	}
	return nil
}

func (x *Signature) GetValueSignature() *ValueSignature {
	if x, ok := x.GetSealedValue().(*Signature_ValueSignature); ok {
		return x.ValueSignature
	}
	return nil
}

type isSignature_SealedValue interface {
	isSignature_SealedValue()
}

type Signature_ClassSignature struct {
	ClassSignature *ClassSignature `protobuf:"bytes,1,opt,name=class_signature,json=classSignature,proto3,oneof"`
}

type Signature_MethodSignature struct {
	MethodSignature *MethodSignature `protobuf:"bytes,2,opt,name=method_signature,json=methodSignature,proto3,oneof"`
}

type Signature_TypeSignature struct {
	TypeSignature *TypeSignature `protobuf:"bytes,3,opt,name=type_signature,json=typeSignature,proto3,oneof"`
}

type Signature_ValueSignature struct {
	ValueSignature *ValueSignature `protobuf:"bytes,4,opt,name=value_signature,json=valueSignature,proto3,oneof"`
}

func (*Signature_ClassSignature) isSignature_SealedValue() {}

func (*Signature_MethodSignature) isSignature_SealedValue() {}

func (*Signature_TypeSignature) isSignature_SealedValue() {}

func (*Signature_ValueSignature) isSignature_SealedValue() {}

type ClassSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeParameters *Scope  `protobuf:"bytes,1,opt,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	Parents        []*Type `protobuf:"bytes,2,rep,name=parents,proto3" json:"parents,omitempty"`
	Self           *Type   `protobuf:"bytes,3,opt,name=self,proto3" json:"self,omitempty"`
	Declarations   *Scope  `protobuf:"bytes,4,opt,name=declarations,proto3" json:"declarations,omitempty"`
}

func (x *ClassSignature) Reset() {
	*x = ClassSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassSignature) ProtoMessage() {}

func (x *ClassSignature) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassSignature.ProtoReflect.Descriptor instead.
func (*ClassSignature) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{35}
}

func (x *ClassSignature) GetTypeParameters() *Scope {
	if x != nil {
		return x.TypeParameters
	}
	return nil
}

func (x *ClassSignature) GetParents() []*Type {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *ClassSignature) GetSelf() *Type {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *ClassSignature) GetDeclarations() *Scope {
	if x != nil {
		return x.Declarations
	}
	return nil
}

type MethodSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeParameters *Scope   `protobuf:"bytes,1,opt,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	ParameterLists []*Scope `protobuf:"bytes,2,rep,name=parameter_lists,json=parameterLists,proto3" json:"parameter_lists,omitempty"`
	ReturnType     *Type    `protobuf:"bytes,3,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
}

func (x *MethodSignature) Reset() {
	*x = MethodSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodSignature) ProtoMessage() {}

func (x *MethodSignature) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodSignature.ProtoReflect.Descriptor instead.
func (*MethodSignature) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{36}
}

func (x *MethodSignature) GetTypeParameters() *Scope {
	if x != nil {
		return x.TypeParameters
	}
	return nil
}

func (x *MethodSignature) GetParameterLists() []*Scope {
	if x != nil {
		return x.ParameterLists
	}
	return nil
}

func (x *MethodSignature) GetReturnType() *Type {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

type TypeSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeParameters *Scope `protobuf:"bytes,1,opt,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	LowerBound     *Type  `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound     *Type  `protobuf:"bytes,3,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *TypeSignature) Reset() {
	*x = TypeSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSignature) ProtoMessage() {}

func (x *TypeSignature) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSignature.ProtoReflect.Descriptor instead.
func (*TypeSignature) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{37}
}

func (x *TypeSignature) GetTypeParameters() *Scope {
	if x != nil {
		return x.TypeParameters
	}
	return nil
}

func (x *TypeSignature) GetLowerBound() *Type {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *TypeSignature) GetUpperBound() *Type {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type ValueSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpe *Type `protobuf:"bytes,1,opt,name=tpe,proto3" json:"tpe,omitempty"`
}

func (x *ValueSignature) Reset() {
	*x = ValueSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSignature) ProtoMessage() {}

func (x *ValueSignature) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSignature.ProtoReflect.Descriptor instead.
func (*ValueSignature) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{38}
}

func (x *ValueSignature) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

type SymbolInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol            string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Language          Language               `protobuf:"varint,16,opt,name=language,proto3,enum=scala.meta.semanticdb.Language" json:"language,omitempty"`
	Kind              SymbolInformation_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=scala.meta.semanticdb.SymbolInformation_Kind" json:"kind,omitempty"`
	Properties        int32                  `protobuf:"varint,4,opt,name=properties,proto3" json:"properties,omitempty"`
	DisplayName       string                 `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Signature         *Signature             `protobuf:"bytes,17,opt,name=signature,proto3" json:"signature,omitempty"`
	Annotations       []*Annotation          `protobuf:"bytes,13,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Access            *Access                `protobuf:"bytes,18,opt,name=access,proto3" json:"access,omitempty"`
	OverriddenSymbols []string               `protobuf:"bytes,19,rep,name=overridden_symbols,json=overriddenSymbols,proto3" json:"overridden_symbols,omitempty"`
	Documentation     *Documentation         `protobuf:"bytes,20,opt,name=documentation,proto3" json:"documentation,omitempty"`
}

func (x *SymbolInformation) Reset() {
	*x = SymbolInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInformation) ProtoMessage() {}

func (x *SymbolInformation) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInformation.ProtoReflect.Descriptor instead.
func (*SymbolInformation) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{39}
}

func (x *SymbolInformation) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SymbolInformation) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_UNKNOWN_LANGUAGE
}

func (x *SymbolInformation) GetKind() SymbolInformation_Kind {
	if x != nil {
		return x.Kind
	}
	return SymbolInformation_UNKNOWN_KIND
}

func (x *SymbolInformation) GetProperties() int32 {
	if x != nil {
		return x.Properties
	}
	return 0
}

func (x *SymbolInformation) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SymbolInformation) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SymbolInformation) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *SymbolInformation) GetAccess() *Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *SymbolInformation) GetOverriddenSymbols() []string {
	if x != nil {
		return x.OverriddenSymbols
	}
	return nil
}

func (x *SymbolInformation) GetDocumentation() *Documentation {
	if x != nil {
		return x.Documentation
	}
	return nil
}

type Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Format  Documentation_Format `protobuf:"varint,2,opt,name=format,proto3,enum=scala.meta.semanticdb.Documentation_Format" json:"format,omitempty"`
}

func (x *Documentation) Reset() {
	*x = Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documentation) ProtoMessage() {}

func (x *Documentation) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documentation.ProtoReflect.Descriptor instead.
func (*Documentation) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{40}
}

func (x *Documentation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Documentation) GetFormat() Documentation_Format {
	if x != nil {
		return x.Format
	}
	return Documentation_HTML
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpe *Type `protobuf:"bytes,1,opt,name=tpe,proto3" json:"tpe,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{41}
}

func (x *Annotation) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

type Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SealedValue:
	//	*Access_PrivateAccess
	//	*Access_PrivateThisAccess
	//	*Access_PrivateWithinAccess
	//	*Access_ProtectedAccess
	//	*Access_ProtectedThisAccess
	//	*Access_ProtectedWithinAccess
	//	*Access_PublicAccess
	SealedValue isAccess_SealedValue `protobuf_oneof:"sealed_value"`
}

func (x *Access) Reset() {
	*x = Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Access) ProtoMessage() {}

func (x *Access) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Access.ProtoReflect.Descriptor instead.
func (*Access) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{42}
}

func (m *Access) GetSealedValue() isAccess_SealedValue {
	if m != nil {
		return m.SealedValue
	}
	return nil
}

func (x *Access) GetPrivateAccess() *PrivateAccess {
	if x, ok := x.GetSealedValue().(*Access_PrivateAccess); ok {
		return x.PrivateAccess
	}
	return nil
}

func (x *Access) GetPrivateThisAccess() *PrivateThisAccess {
	if x, ok := x.GetSealedValue().(*Access_PrivateThisAccess); ok {
		return x.PrivateThisAccess
	}
	return nil
}

func (x *Access) GetPrivateWithinAccess() *PrivateWithinAccess {
	if x, ok := x.GetSealedValue().(*Access_PrivateWithinAccess); ok {
		return x.PrivateWithinAccess
	}
	return nil
}

func (x *Access) GetProtectedAccess() *ProtectedAccess {
	if x, ok := x.GetSealedValue().(*Access_ProtectedAccess); ok {
		return x.ProtectedAccess
	}
	return nil
}

func (x *Access) GetProtectedThisAccess() *ProtectedThisAccess {
	if x, ok := x.GetSealedValue().(*Access_ProtectedThisAccess); ok {
		return x.ProtectedThisAccess
	}
	return nil
}

func (x *Access) GetProtectedWithinAccess() *ProtectedWithinAccess {
	if x, ok := x.GetSealedValue().(*Access_ProtectedWithinAccess); ok {
		return x.ProtectedWithinAccess
	}
	return nil
}

func (x *Access) GetPublicAccess() *PublicAccess {
	if x, ok := x.GetSealedValue().(*Access_PublicAccess); ok {
		return x.PublicAccess
	}
	return nil
}

type isAccess_SealedValue interface {
	isAccess_SealedValue()
}

type Access_PrivateAccess struct {
	PrivateAccess *PrivateAccess `protobuf:"bytes,1,opt,name=private_access,json=privateAccess,proto3,oneof"`
}

type Access_PrivateThisAccess struct {
	PrivateThisAccess *PrivateThisAccess `protobuf:"bytes,2,opt,name=private_this_access,json=privateThisAccess,proto3,oneof"`
}

type Access_PrivateWithinAccess struct {
	PrivateWithinAccess *PrivateWithinAccess `protobuf:"bytes,3,opt,name=private_within_access,json=privateWithinAccess,proto3,oneof"`
}

type Access_ProtectedAccess struct {
	ProtectedAccess *ProtectedAccess `protobuf:"bytes,4,opt,name=protected_access,json=protectedAccess,proto3,oneof"`
}

type Access_ProtectedThisAccess struct {
	ProtectedThisAccess *ProtectedThisAccess `protobuf:"bytes,5,opt,name=protected_this_access,json=protectedThisAccess,proto3,oneof"`
}

type Access_ProtectedWithinAccess struct {
	ProtectedWithinAccess *ProtectedWithinAccess `protobuf:"bytes,6,opt,name=protected_within_access,json=protectedWithinAccess,proto3,oneof"`
}

type Access_PublicAccess struct {
	PublicAccess *PublicAccess `protobuf:"bytes,7,opt,name=public_access,json=publicAccess,proto3,oneof"`
}

func (*Access_PrivateAccess) isAccess_SealedValue() {}

func (*Access_PrivateThisAccess) isAccess_SealedValue() {}

func (*Access_PrivateWithinAccess) isAccess_SealedValue() {}

func (*Access_ProtectedAccess) isAccess_SealedValue() {}

func (*Access_ProtectedThisAccess) isAccess_SealedValue() {}

func (*Access_ProtectedWithinAccess) isAccess_SealedValue() {}

func (*Access_PublicAccess) isAccess_SealedValue() {}

type PrivateAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrivateAccess) Reset() {
	*x = PrivateAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateAccess) ProtoMessage() {}

func (x *PrivateAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateAccess.ProtoReflect.Descriptor instead.
func (*PrivateAccess) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{43}
}

type PrivateThisAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrivateThisAccess) Reset() {
	*x = PrivateThisAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateThisAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateThisAccess) ProtoMessage() {}

func (x *PrivateThisAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateThisAccess.ProtoReflect.Descriptor instead.
func (*PrivateThisAccess) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{44}
}

type PrivateWithinAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *PrivateWithinAccess) Reset() {
	*x = PrivateWithinAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateWithinAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateWithinAccess) ProtoMessage() {}

func (x *PrivateWithinAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateWithinAccess.ProtoReflect.Descriptor instead.
func (*PrivateWithinAccess) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{45}
}

func (x *PrivateWithinAccess) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type ProtectedAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProtectedAccess) Reset() {
	*x = ProtectedAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedAccess) ProtoMessage() {}

func (x *ProtectedAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedAccess.ProtoReflect.Descriptor instead.
func (*ProtectedAccess) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{46}
}

type ProtectedThisAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProtectedThisAccess) Reset() {
	*x = ProtectedThisAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedThisAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedThisAccess) ProtoMessage() {}

func (x *ProtectedThisAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedThisAccess.ProtoReflect.Descriptor instead.
func (*ProtectedThisAccess) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{47}
}

type ProtectedWithinAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *ProtectedWithinAccess) Reset() {
	*x = ProtectedWithinAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedWithinAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedWithinAccess) ProtoMessage() {}

func (x *ProtectedWithinAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedWithinAccess.ProtoReflect.Descriptor instead.
func (*ProtectedWithinAccess) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{48}
}

func (x *ProtectedWithinAccess) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type PublicAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicAccess) Reset() {
	*x = PublicAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicAccess) ProtoMessage() {}

func (x *PublicAccess) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicAccess.ProtoReflect.Descriptor instead.
func (*PublicAccess) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{49}
}

type SymbolOccurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range  *Range                `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Symbol string                `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Role   SymbolOccurrence_Role `protobuf:"varint,3,opt,name=role,proto3,enum=scala.meta.semanticdb.SymbolOccurrence_Role" json:"role,omitempty"`
}

func (x *SymbolOccurrence) Reset() {
	*x = SymbolOccurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolOccurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolOccurrence) ProtoMessage() {}

func (x *SymbolOccurrence) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolOccurrence.ProtoReflect.Descriptor instead.
func (*SymbolOccurrence) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{50}
}

func (x *SymbolOccurrence) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SymbolOccurrence) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SymbolOccurrence) GetRole() SymbolOccurrence_Role {
	if x != nil {
		return x.Role
	}
	return SymbolOccurrence_UNKNOWN_ROLE
}

type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range    *Range              `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Severity Diagnostic_Severity `protobuf:"varint,2,opt,name=severity,proto3,enum=scala.meta.semanticdb.Diagnostic_Severity" json:"severity,omitempty"`
	Message  string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{51}
}

func (x *Diagnostic) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Diagnostic) GetSeverity() Diagnostic_Severity {
	if x != nil {
		return x.Severity
	}
	return Diagnostic_UNKNOWN_SEVERITY
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Synthetic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Tree  *Tree  `protobuf:"bytes,2,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *Synthetic) Reset() {
	*x = Synthetic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Synthetic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Synthetic) ProtoMessage() {}

func (x *Synthetic) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Synthetic.ProtoReflect.Descriptor instead.
func (*Synthetic) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{52}
}

func (x *Synthetic) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Synthetic) GetTree() *Tree {
	if x != nil {
		return x.Tree
	}
	return nil
}

type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SealedValue:
	//	*Tree_ApplyTree
	//	*Tree_FunctionTree
	//	*Tree_IdTree
	//	*Tree_LiteralTree
	//	*Tree_MacroExpansionTree
	//	*Tree_OriginalTree
	//	*Tree_SelectTree
	//	*Tree_TypeApplyTree
	SealedValue isTree_SealedValue `protobuf_oneof:"sealed_value"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{53}
}

func (m *Tree) GetSealedValue() isTree_SealedValue {
	if m != nil {
		return m.SealedValue
	}
	return nil
}

func (x *Tree) GetApplyTree() *ApplyTree {
	if x, ok := x.GetSealedValue().(*Tree_ApplyTree); ok {
		return x.ApplyTree
	}
	return nil
}

func (x *Tree) GetFunctionTree() *FunctionTree {
	if x, ok := x.GetSealedValue().(*Tree_FunctionTree); ok {
		return x.FunctionTree
	}
	return nil
}

func (x *Tree) GetIdTree() *IdTree {
	if x, ok := x.GetSealedValue().(*Tree_IdTree); ok {
		return x.IdTree
	}
	return nil
}

func (x *Tree) GetLiteralTree() *LiteralTree {
	if x, ok := x.GetSealedValue().(*Tree_LiteralTree); ok {
		return x.LiteralTree
	}
	return nil
}

func (x *Tree) GetMacroExpansionTree() *MacroExpansionTree {
	if x, ok := x.GetSealedValue().(*Tree_MacroExpansionTree); ok {
		return x.MacroExpansionTree
	}
	return nil
}

func (x *Tree) GetOriginalTree() *OriginalTree {
	if x, ok := x.GetSealedValue().(*Tree_OriginalTree); ok {
		return x.OriginalTree
	}
	return nil
}

func (x *Tree) GetSelectTree() *SelectTree {
	if x, ok := x.GetSealedValue().(*Tree_SelectTree); ok {
		return x.SelectTree
	}
	return nil
}

func (x *Tree) GetTypeApplyTree() *TypeApplyTree {
	if x, ok := x.GetSealedValue().(*Tree_TypeApplyTree); ok {
		return x.TypeApplyTree
	}
	return nil
}

type isTree_SealedValue interface {
	isTree_SealedValue()
}

type Tree_ApplyTree struct {
	ApplyTree *ApplyTree `protobuf:"bytes,1,opt,name=apply_tree,json=applyTree,proto3,oneof"`
}

type Tree_FunctionTree struct {
	FunctionTree *FunctionTree `protobuf:"bytes,2,opt,name=function_tree,json=functionTree,proto3,oneof"`
}

type Tree_IdTree struct {
	IdTree *IdTree `protobuf:"bytes,3,opt,name=id_tree,json=idTree,proto3,oneof"`
}

type Tree_LiteralTree struct {
	LiteralTree *LiteralTree `protobuf:"bytes,4,opt,name=literal_tree,json=literalTree,proto3,oneof"`
}

type Tree_MacroExpansionTree struct {
	MacroExpansionTree *MacroExpansionTree `protobuf:"bytes,5,opt,name=macro_expansion_tree,json=macroExpansionTree,proto3,oneof"`
}

type Tree_OriginalTree struct {
	OriginalTree *OriginalTree `protobuf:"bytes,6,opt,name=original_tree,json=originalTree,proto3,oneof"`
}

type Tree_SelectTree struct {
	SelectTree *SelectTree `protobuf:"bytes,7,opt,name=select_tree,json=selectTree,proto3,oneof"`
}

type Tree_TypeApplyTree struct {
	TypeApplyTree *TypeApplyTree `protobuf:"bytes,8,opt,name=type_apply_tree,json=typeApplyTree,proto3,oneof"`
}

func (*Tree_ApplyTree) isTree_SealedValue() {}

func (*Tree_FunctionTree) isTree_SealedValue() {}

func (*Tree_IdTree) isTree_SealedValue() {}

func (*Tree_LiteralTree) isTree_SealedValue() {}

func (*Tree_MacroExpansionTree) isTree_SealedValue() {}

func (*Tree_OriginalTree) isTree_SealedValue() {}

func (*Tree_SelectTree) isTree_SealedValue() {}

func (*Tree_TypeApplyTree) isTree_SealedValue() {}

type ApplyTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function  *Tree   `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Arguments []*Tree `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ApplyTree) Reset() {
	*x = ApplyTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTree) ProtoMessage() {}

func (x *ApplyTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTree.ProtoReflect.Descriptor instead.
func (*ApplyTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{54}
}

func (x *ApplyTree) GetFunction() *Tree {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ApplyTree) GetArguments() []*Tree {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type FunctionTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters []*IdTree `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Body       *Tree     `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *FunctionTree) Reset() {
	*x = FunctionTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionTree) ProtoMessage() {}

func (x *FunctionTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionTree.ProtoReflect.Descriptor instead.
func (*FunctionTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{55}
}

func (x *FunctionTree) GetParameters() []*IdTree {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *FunctionTree) GetBody() *Tree {
	if x != nil {
		return x.Body
	}
	return nil
}

type IdTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *IdTree) Reset() {
	*x = IdTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdTree) ProtoMessage() {}

func (x *IdTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdTree.ProtoReflect.Descriptor instead.
func (*IdTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{56}
}

func (x *IdTree) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type LiteralTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constant *Constant `protobuf:"bytes,1,opt,name=constant,proto3" json:"constant,omitempty"`
}

func (x *LiteralTree) Reset() {
	*x = LiteralTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralTree) ProtoMessage() {}

func (x *LiteralTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralTree.ProtoReflect.Descriptor instead.
func (*LiteralTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{57}
}

func (x *LiteralTree) GetConstant() *Constant {
	if x != nil {
		return x.Constant
	}
	return nil
}

type MacroExpansionTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeforeExpansion *Tree `protobuf:"bytes,1,opt,name=before_expansion,json=beforeExpansion,proto3" json:"before_expansion,omitempty"`
	Tpe             *Type `protobuf:"bytes,2,opt,name=tpe,proto3" json:"tpe,omitempty"`
}

func (x *MacroExpansionTree) Reset() {
	*x = MacroExpansionTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacroExpansionTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacroExpansionTree) ProtoMessage() {}

func (x *MacroExpansionTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacroExpansionTree.ProtoReflect.Descriptor instead.
func (*MacroExpansionTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{58}
}

func (x *MacroExpansionTree) GetBeforeExpansion() *Tree {
	if x != nil {
		return x.BeforeExpansion
	}
	return nil
}

func (x *MacroExpansionTree) GetTpe() *Type {
	if x != nil {
		return x.Tpe
	}
	return nil
}

type OriginalTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *OriginalTree) Reset() {
	*x = OriginalTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginalTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginalTree) ProtoMessage() {}

func (x *OriginalTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginalTree.ProtoReflect.Descriptor instead.
func (*OriginalTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{59}
}

func (x *OriginalTree) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type SelectTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifier *Tree   `protobuf:"bytes,1,opt,name=qualifier,proto3" json:"qualifier,omitempty"`
	Id        *IdTree `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SelectTree) Reset() {
	*x = SelectTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTree) ProtoMessage() {}

func (x *SelectTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTree.ProtoReflect.Descriptor instead.
func (*SelectTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{60}
}

func (x *SelectTree) GetQualifier() *Tree {
	if x != nil {
		return x.Qualifier
	}
	return nil
}

func (x *SelectTree) GetId() *IdTree {
	if x != nil {
		return x.Id
	}
	return nil
}

type TypeApplyTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function      *Tree   `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	TypeArguments []*Type `protobuf:"bytes,2,rep,name=type_arguments,json=typeArguments,proto3" json:"type_arguments,omitempty"`
}

func (x *TypeApplyTree) Reset() {
	*x = TypeApplyTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeApplyTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeApplyTree) ProtoMessage() {}

func (x *TypeApplyTree) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeApplyTree.ProtoReflect.Descriptor instead.
func (*TypeApplyTree) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{61}
}

func (x *TypeApplyTree) GetFunction() *Tree {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *TypeApplyTree) GetTypeArguments() []*Type {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

type MatchType_CaseType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *Type `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Body *Type `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *MatchType_CaseType) Reset() {
	*x = MatchType_CaseType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchType_CaseType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchType_CaseType) ProtoMessage() {}

func (x *MatchType_CaseType) ProtoReflect() protoreflect.Message {
	mi := &file_scala_meta_semanticdb_semanticdb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchType_CaseType.ProtoReflect.Descriptor instead.
func (*MatchType_CaseType) Descriptor() ([]byte, []int) {
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP(), []int{21, 0}
}

func (x *MatchType_CaseType) GetKey() *Type {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MatchType_CaseType) GetBody() *Type {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_scala_meta_semanticdb_semanticdb_proto protoreflect.FileDescriptor

var file_scala_meta_semanticdb_semanticdb_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x1a,
	0x15, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x64, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe2, 0x03, 0x0a, 0x0c, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x64, 0x62, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22,
	0x8f, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x22, 0x50, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x68, 0x61, 0x72, 0x64,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x68, 0x61, 0x72, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x22, 0xda, 0x09, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x74, 0x68, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x68, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x62,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10,
	0x0d, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22, 0x88, 0x01,
	0x0a, 0x0a, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x07, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x22, 0x22, 0x0a, 0x08, 0x54, 0x68, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x58, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x4b,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x10, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x3e, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x3d, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x74, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x03, 0x74, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x70, 0x65, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x74, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x8b,
	0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x74, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x0a,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x72, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xf6,
	0x06, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4c, 0x6f, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x24, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x4c, 0x6f, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25,
	0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x64, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73,
	0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x40, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xdd, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xd2, 0x01, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x64, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x3f, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x74, 0x70, 0x65, 0x22, 0xa0, 0x09, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x02,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x14, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x41, 0x43, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x0d, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x12, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22,
	0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0x04, 0x08, 0x05, 0x10,
	0x05, 0x22, 0x04, 0x08, 0x0f, 0x10, 0x0f, 0x22, 0x04, 0x08, 0x10, 0x10, 0x10, 0x22, 0xac, 0x02,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x42, 0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41,
	0x4c, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x5a, 0x59, 0x10, 0x40, 0x12, 0x09, 0x0a,
	0x04, 0x43, 0x41, 0x53, 0x45, 0x10, 0x80, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x4f, 0x56, 0x41,
	0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x80, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x80, 0x04, 0x12, 0x08, 0x0a, 0x03,
	0x56, 0x41, 0x4c, 0x10, 0x80, 0x08, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x41, 0x52, 0x10, 0x80, 0x10,
	0x12, 0x0b, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x80, 0x20, 0x12, 0x0c, 0x0a,
	0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x80, 0x40, 0x12, 0x0a, 0x0a, 0x04, 0x45,
	0x4e, 0x55, 0x4d, 0x10, 0x80, 0x80, 0x01, 0x12, 0x0d, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x80, 0x80, 0x02, 0x12, 0x0b, 0x0a, 0x05, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x10,
	0x80, 0x80, 0x04, 0x12, 0x0c, 0x0a, 0x06, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x80, 0x80,
	0x08, 0x12, 0x0a, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x80, 0x80, 0x10, 0x12, 0x11, 0x0a,
	0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x80, 0x80, 0x20,
	0x12, 0x0b, 0x0a, 0x05, 0x49, 0x4e, 0x46, 0x49, 0x58, 0x10, 0x80, 0x80, 0x40, 0x12, 0x0d, 0x0a,
	0x06, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x10, 0x80, 0x80, 0x80, 0x01, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b,
	0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0e,
	0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x45, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4a,
	0x41, 0x56, 0x41, 0x44, 0x4f, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x44, 0x4f, 0x43, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x44, 0x4f, 0x43, 0x10, 0x04,
	0x22, 0x3b, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x03, 0x74, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x70, 0x65, 0x22, 0x90, 0x05,
	0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x54, 0x68, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x68, 0x69, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x68, 0x69, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x2f, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xd9, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xf7, 0x01, 0x0a,
	0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x64, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x53, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x22, 0x70, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x22, 0xe9, 0x04, 0x0a, 0x04, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x64, 0x62, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x54, 0x72, 0x65, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x64, 0x54, 0x72, 0x65, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x6d, 0x61, 0x63, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x72, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64,
	0x62, 0x2e, 0x49, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x20, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x4a, 0x0a, 0x0b, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x70,
	0x65, 0x22, 0x42, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x64, 0x62, 0x2e, 0x49, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8c, 0x01,
	0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x36, 0x0a, 0x06,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x44, 0x42,
	0x33, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x44,
	0x42, 0x34, 0x10, 0x04, 0x2a, 0x35, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x56, 0x41, 0x10, 0x02, 0x42, 0x47, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x62,
	0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x2d, 0x67, 0x61, 0x7a, 0x65, 0x6c, 0x6c, 0x65, 0x2f, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x64, 0x62, 0x3b, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x64, 0x62, 0xe2,
	0x3f, 0x02, 0x48, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scala_meta_semanticdb_semanticdb_proto_rawDescOnce sync.Once
	file_scala_meta_semanticdb_semanticdb_proto_rawDescData = file_scala_meta_semanticdb_semanticdb_proto_rawDesc
)

func file_scala_meta_semanticdb_semanticdb_proto_rawDescGZIP() []byte {
	file_scala_meta_semanticdb_semanticdb_proto_rawDescOnce.Do(func() {
		file_scala_meta_semanticdb_semanticdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_scala_meta_semanticdb_semanticdb_proto_rawDescData)
	})
	return file_scala_meta_semanticdb_semanticdb_proto_rawDescData
}

var file_scala_meta_semanticdb_semanticdb_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_scala_meta_semanticdb_semanticdb_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_scala_meta_semanticdb_semanticdb_proto_goTypes = []interface{}{
	(Schema)(0),                     // 0: scala.meta.semanticdb.Schema
	(Language)(0),                   // 1: scala.meta.semanticdb.Language
	(SymbolInformation_Kind)(0),     // 2: scala.meta.semanticdb.SymbolInformation.Kind
	(SymbolInformation_Property)(0), // 3: scala.meta.semanticdb.SymbolInformation.Property
	(Documentation_Format)(0),       // 4: scala.meta.semanticdb.Documentation.Format
	(SymbolOccurrence_Role)(0),      // 5: scala.meta.semanticdb.SymbolOccurrence.Role
	(Diagnostic_Severity)(0),        // 6: scala.meta.semanticdb.Diagnostic.Severity
	(*TextDocuments)(nil),           // 7: scala.meta.semanticdb.TextDocuments
	(*TextDocument)(nil),            // 8: scala.meta.semanticdb.TextDocument
	(*Range)(nil),                   // 9: scala.meta.semanticdb.Range
	(*Location)(nil),                // 10: scala.meta.semanticdb.Location
	(*Scope)(nil),                   // 11: scala.meta.semanticdb.Scope
	(*Type)(nil),                    // 12: scala.meta.semanticdb.Type
	(*LambdaType)(nil),              // 13: scala.meta.semanticdb.LambdaType
	(*TypeRef)(nil),                 // 14: scala.meta.semanticdb.TypeRef
	(*SingleType)(nil),              // 15: scala.meta.semanticdb.SingleType
	(*ThisType)(nil),                // 16: scala.meta.semanticdb.ThisType
	(*SuperType)(nil),               // 17: scala.meta.semanticdb.SuperType
	(*ConstantType)(nil),            // 18: scala.meta.semanticdb.ConstantType
	(*IntersectionType)(nil),        // 19: scala.meta.semanticdb.IntersectionType
	(*UnionType)(nil),               // 20: scala.meta.semanticdb.UnionType
	(*WithType)(nil),                // 21: scala.meta.semanticdb.WithType
	(*StructuralType)(nil),          // 22: scala.meta.semanticdb.StructuralType
	(*AnnotatedType)(nil),           // 23: scala.meta.semanticdb.AnnotatedType
	(*ExistentialType)(nil),         // 24: scala.meta.semanticdb.ExistentialType
	(*UniversalType)(nil),           // 25: scala.meta.semanticdb.UniversalType
	(*ByNameType)(nil),              // 26: scala.meta.semanticdb.ByNameType
	(*RepeatedType)(nil),            // 27: scala.meta.semanticdb.RepeatedType
	(*MatchType)(nil),               // 28: scala.meta.semanticdb.MatchType
	(*Constant)(nil),                // 29: scala.meta.semanticdb.Constant
	(*UnitConstant)(nil),            // 30: scala.meta.semanticdb.UnitConstant
	(*BooleanConstant)(nil),         // 31: scala.meta.semanticdb.BooleanConstant
	(*ByteConstant)(nil),            // 32: scala.meta.semanticdb.ByteConstant
	(*ShortConstant)(nil),           // 33: scala.meta.semanticdb.ShortConstant
	(*CharConstant)(nil),            // 34: scala.meta.semanticdb.CharConstant
	(*IntConstant)(nil),             // 35: scala.meta.semanticdb.IntConstant
	(*LongConstant)(nil),            // 36: scala.meta.semanticdb.LongConstant
	(*FloatConstant)(nil),           // 37: scala.meta.semanticdb.FloatConstant
	(*DoubleConstant)(nil),          // 38: scala.meta.semanticdb.DoubleConstant
	(*StringConstant)(nil),          // 39: scala.meta.semanticdb.StringConstant
	(*NullConstant)(nil),            // 40: scala.meta.semanticdb.NullConstant
	(*Signature)(nil),               // 41: scala.meta.semanticdb.Signature
	(*ClassSignature)(nil),          // 42: scala.meta.semanticdb.ClassSignature
	(*MethodSignature)(nil),         // 43: scala.meta.semanticdb.MethodSignature
	(*TypeSignature)(nil),           // 44: scala.meta.semanticdb.TypeSignature
	(*ValueSignature)(nil),          // 45: scala.meta.semanticdb.ValueSignature
	(*SymbolInformation)(nil),       // 46: scala.meta.semanticdb.SymbolInformation
	(*Documentation)(nil),           // 47: scala.meta.semanticdb.Documentation
	(*Annotation)(nil),              // 48: scala.meta.semanticdb.Annotation
	(*Access)(nil),                  // 49: scala.meta.semanticdb.Access
	(*PrivateAccess)(nil),           // 50: scala.meta.semanticdb.PrivateAccess
	(*PrivateThisAccess)(nil),       // 51: scala.meta.semanticdb.PrivateThisAccess
	(*PrivateWithinAccess)(nil),     // 52: scala.meta.semanticdb.PrivateWithinAccess
	(*ProtectedAccess)(nil),         // 53: scala.meta.semanticdb.ProtectedAccess
	(*ProtectedThisAccess)(nil),     // 54: scala.meta.semanticdb.ProtectedThisAccess
	(*ProtectedWithinAccess)(nil),   // 55: scala.meta.semanticdb.ProtectedWithinAccess
	(*PublicAccess)(nil),            // 56: scala.meta.semanticdb.PublicAccess
	(*SymbolOccurrence)(nil),        // 57: scala.meta.semanticdb.SymbolOccurrence
	(*Diagnostic)(nil),              // 58: scala.meta.semanticdb.Diagnostic
	(*Synthetic)(nil),               // 59: scala.meta.semanticdb.Synthetic
	(*Tree)(nil),                    // 60: scala.meta.semanticdb.Tree
	(*ApplyTree)(nil),               // 61: scala.meta.semanticdb.ApplyTree
	(*FunctionTree)(nil),            // 62: scala.meta.semanticdb.FunctionTree
	(*IdTree)(nil),                  // 63: scala.meta.semanticdb.IdTree
	(*LiteralTree)(nil),             // 64: scala.meta.semanticdb.LiteralTree
	(*MacroExpansionTree)(nil),      // 65: scala.meta.semanticdb.MacroExpansionTree
	(*OriginalTree)(nil),            // 66: scala.meta.semanticdb.OriginalTree
	(*SelectTree)(nil),              // 67: scala.meta.semanticdb.SelectTree
	(*TypeApplyTree)(nil),           // 68: scala.meta.semanticdb.TypeApplyTree
	(*MatchType_CaseType)(nil),      // 69: scala.meta.semanticdb.MatchType.CaseType
}
var file_scala_meta_semanticdb_semanticdb_proto_depIdxs = []int32{
	8,   // 0: scala.meta.semanticdb.TextDocuments.documents:type_name -> scala.meta.semanticdb.TextDocument
	0,   // 1: scala.meta.semanticdb.TextDocument.schema:type_name -> scala.meta.semanticdb.Schema
	1,   // 2: scala.meta.semanticdb.TextDocument.language:type_name -> scala.meta.semanticdb.Language
	46,  // 3: scala.meta.semanticdb.TextDocument.symbols:type_name -> scala.meta.semanticdb.SymbolInformation
	57,  // 4: scala.meta.semanticdb.TextDocument.occurrences:type_name -> scala.meta.semanticdb.SymbolOccurrence
	58,  // 5: scala.meta.semanticdb.TextDocument.diagnostics:type_name -> scala.meta.semanticdb.Diagnostic
	59,  // 6: scala.meta.semanticdb.TextDocument.synthetics:type_name -> scala.meta.semanticdb.Synthetic
	9,   // 7: scala.meta.semanticdb.Location.range:type_name -> scala.meta.semanticdb.Range
	46,  // 8: scala.meta.semanticdb.Scope.hardlinks:type_name -> scala.meta.semanticdb.SymbolInformation
	14,  // 9: scala.meta.semanticdb.Type.type_ref:type_name -> scala.meta.semanticdb.TypeRef
	15,  // 10: scala.meta.semanticdb.Type.single_type:type_name -> scala.meta.semanticdb.SingleType
	16,  // 11: scala.meta.semanticdb.Type.this_type:type_name -> scala.meta.semanticdb.ThisType
	17,  // 12: scala.meta.semanticdb.Type.super_type:type_name -> scala.meta.semanticdb.SuperType
	18,  // 13: scala.meta.semanticdb.Type.constant_type:type_name -> scala.meta.semanticdb.ConstantType
	19,  // 14: scala.meta.semanticdb.Type.intersection_type:type_name -> scala.meta.semanticdb.IntersectionType
	20,  // 15: scala.meta.semanticdb.Type.union_type:type_name -> scala.meta.semanticdb.UnionType
	21,  // 16: scala.meta.semanticdb.Type.with_type:type_name -> scala.meta.semanticdb.WithType
	22,  // 17: scala.meta.semanticdb.Type.structural_type:type_name -> scala.meta.semanticdb.StructuralType
	23,  // 18: scala.meta.semanticdb.Type.annotated_type:type_name -> scala.meta.semanticdb.AnnotatedType
	24,  // 19: scala.meta.semanticdb.Type.existential_type:type_name -> scala.meta.semanticdb.ExistentialType
	25,  // 20: scala.meta.semanticdb.Type.universal_type:type_name -> scala.meta.semanticdb.UniversalType
	26,  // 21: scala.meta.semanticdb.Type.by_name_type:type_name -> scala.meta.semanticdb.ByNameType
	27,  // 22: scala.meta.semanticdb.Type.repeated_type:type_name -> scala.meta.semanticdb.RepeatedType
	28,  // 23: scala.meta.semanticdb.Type.match_type:type_name -> scala.meta.semanticdb.MatchType
	13,  // 24: scala.meta.semanticdb.Type.lambda_type:type_name -> scala.meta.semanticdb.LambdaType
	11,  // 25: scala.meta.semanticdb.LambdaType.parameters:type_name -> scala.meta.semanticdb.Scope
	12,  // 26: scala.meta.semanticdb.LambdaType.return_type:type_name -> scala.meta.semanticdb.Type
	12,  // 27: scala.meta.semanticdb.TypeRef.prefix:type_name -> scala.meta.semanticdb.Type
	12,  // 28: scala.meta.semanticdb.TypeRef.type_arguments:type_name -> scala.meta.semanticdb.Type
	12,  // 29: scala.meta.semanticdb.SingleType.prefix:type_name -> scala.meta.semanticdb.Type
	12,  // 30: scala.meta.semanticdb.SuperType.prefix:type_name -> scala.meta.semanticdb.Type
	29,  // 31: scala.meta.semanticdb.ConstantType.constant:type_name -> scala.meta.semanticdb.Constant
	12,  // 32: scala.meta.semanticdb.IntersectionType.types:type_name -> scala.meta.semanticdb.Type
	12,  // 33: scala.meta.semanticdb.UnionType.types:type_name -> scala.meta.semanticdb.Type
	12,  // 34: scala.meta.semanticdb.WithType.types:type_name -> scala.meta.semanticdb.Type
	12,  // 35: scala.meta.semanticdb.StructuralType.tpe:type_name -> scala.meta.semanticdb.Type
	11,  // 36: scala.meta.semanticdb.StructuralType.declarations:type_name -> scala.meta.semanticdb.Scope
	48,  // 37: scala.meta.semanticdb.AnnotatedType.annotations:type_name -> scala.meta.semanticdb.Annotation
	12,  // 38: scala.meta.semanticdb.AnnotatedType.tpe:type_name -> scala.meta.semanticdb.Type
	12,  // 39: scala.meta.semanticdb.ExistentialType.tpe:type_name -> scala.meta.semanticdb.Type
	11,  // 40: scala.meta.semanticdb.ExistentialType.declarations:type_name -> scala.meta.semanticdb.Scope
	11,  // 41: scala.meta.semanticdb.UniversalType.type_parameters:type_name -> scala.meta.semanticdb.Scope
	12,  // 42: scala.meta.semanticdb.UniversalType.tpe:type_name -> scala.meta.semanticdb.Type
	12,  // 43: scala.meta.semanticdb.ByNameType.tpe:type_name -> scala.meta.semanticdb.Type
	12,  // 44: scala.meta.semanticdb.RepeatedType.tpe:type_name -> scala.meta.semanticdb.Type
	12,  // 45: scala.meta.semanticdb.MatchType.scrutinee:type_name -> scala.meta.semanticdb.Type
	69,  // 46: scala.meta.semanticdb.MatchType.cases:type_name -> scala.meta.semanticdb.MatchType.CaseType
	30,  // 47: scala.meta.semanticdb.Constant.unit_constant:type_name -> scala.meta.semanticdb.UnitConstant
	31,  // 48: scala.meta.semanticdb.Constant.boolean_constant:type_name -> scala.meta.semanticdb.BooleanConstant
	32,  // 49: scala.meta.semanticdb.Constant.byte_constant:type_name -> scala.meta.semanticdb.ByteConstant
	33,  // 50: scala.meta.semanticdb.Constant.short_constant:type_name -> scala.meta.semanticdb.ShortConstant
	34,  // 51: scala.meta.semanticdb.Constant.char_constant:type_name -> scala.meta.semanticdb.CharConstant
	35,  // 52: scala.meta.semanticdb.Constant.int_constant:type_name -> scala.meta.semanticdb.IntConstant
	36,  // 53: scala.meta.semanticdb.Constant.long_constant:type_name -> scala.meta.semanticdb.LongConstant
	37,  // 54: scala.meta.semanticdb.Constant.float_constant:type_name -> scala.meta.semanticdb.FloatConstant
	38,  // 55: scala.meta.semanticdb.Constant.double_constant:type_name -> scala.meta.semanticdb.DoubleConstant
	39,  // 56: scala.meta.semanticdb.Constant.string_constant:type_name -> scala.meta.semanticdb.StringConstant
	40,  // 57: scala.meta.semanticdb.Constant.null_constant:type_name -> scala.meta.semanticdb.NullConstant
	42,  // 58: scala.meta.semanticdb.Signature.class_signature:type_name -> scala.meta.semanticdb.ClassSignature
	43,  // 59: scala.meta.semanticdb.Signature.method_signature:type_name -> scala.meta.semanticdb.MethodSignature
	44,  // 60: scala.meta.semanticdb.Signature.type_signature:type_name -> scala.meta.semanticdb.TypeSignature
	45,  // 61: scala.meta.semanticdb.Signature.value_signature:type_name -> scala.meta.semanticdb.ValueSignature
	11,  // 62: scala.meta.semanticdb.ClassSignature.type_parameters:type_name -> scala.meta.semanticdb.Scope
	12,  // 63: scala.meta.semanticdb.ClassSignature.parents:type_name -> scala.meta.semanticdb.Type
	12,  // 64: scala.meta.semanticdb.ClassSignature.self:type_name -> scala.meta.semanticdb.Type
	11,  // 65: scala.meta.semanticdb.ClassSignature.declarations:type_name -> scala.meta.semanticdb.Scope
	11,  // 66: scala.meta.semanticdb.MethodSignature.type_parameters:type_name -> scala.meta.semanticdb.Scope
	11,  // 67: scala.meta.semanticdb.MethodSignature.parameter_lists:type_name -> scala.meta.semanticdb.Scope
	12,  // 68: scala.meta.semanticdb.MethodSignature.return_type:type_name -> scala.meta.semanticdb.Type
	11,  // 69: scala.meta.semanticdb.TypeSignature.type_parameters:type_name -> scala.meta.semanticdb.Scope
	12,  // 70: scala.meta.semanticdb.TypeSignature.lower_bound:type_name -> scala.meta.semanticdb.Type
	12,  // 71: scala.meta.semanticdb.TypeSignature.upper_bound:type_name -> scala.meta.semanticdb.Type
	12,  // 72: scala.meta.semanticdb.ValueSignature.tpe:type_name -> scala.meta.semanticdb.Type
	1,   // 73: scala.meta.semanticdb.SymbolInformation.language:type_name -> scala.meta.semanticdb.Language
	2,   // 74: scala.meta.semanticdb.SymbolInformation.kind:type_name -> scala.meta.semanticdb.SymbolInformation.Kind
	41,  // 75: scala.meta.semanticdb.SymbolInformation.signature:type_name -> scala.meta.semanticdb.Signature
	48,  // 76: scala.meta.semanticdb.SymbolInformation.annotations:type_name -> scala.meta.semanticdb.Annotation
	49,  // 77: scala.meta.semanticdb.SymbolInformation.access:type_name -> scala.meta.semanticdb.Access
	47,  // 78: scala.meta.semanticdb.SymbolInformation.documentation:type_name -> scala.meta.semanticdb.Documentation
	4,   // 79: scala.meta.semanticdb.Documentation.format:type_name -> scala.meta.semanticdb.Documentation.Format
	12,  // 80: scala.meta.semanticdb.Annotation.tpe:type_name -> scala.meta.semanticdb.Type
	50,  // 81: scala.meta.semanticdb.Access.private_access:type_name -> scala.meta.semanticdb.PrivateAccess
	51,  // 82: scala.meta.semanticdb.Access.private_this_access:type_name -> scala.meta.semanticdb.PrivateThisAccess
	52,  // 83: scala.meta.semanticdb.Access.private_within_access:type_name -> scala.meta.semanticdb.PrivateWithinAccess
	53,  // 84: scala.meta.semanticdb.Access.protected_access:type_name -> scala.meta.semanticdb.ProtectedAccess
	54,  // 85: scala.meta.semanticdb.Access.protected_this_access:type_name -> scala.meta.semanticdb.ProtectedThisAccess
	55,  // 86: scala.meta.semanticdb.Access.protected_within_access:type_name -> scala.meta.semanticdb.ProtectedWithinAccess
	56,  // 87: scala.meta.semanticdb.Access.public_access:type_name -> scala.meta.semanticdb.PublicAccess
	9,   // 88: scala.meta.semanticdb.SymbolOccurrence.range:type_name -> scala.meta.semanticdb.Range
	5,   // 89: scala.meta.semanticdb.SymbolOccurrence.role:type_name -> scala.meta.semanticdb.SymbolOccurrence.Role
	9,   // 90: scala.meta.semanticdb.Diagnostic.range:type_name -> scala.meta.semanticdb.Range
	6,   // 91: scala.meta.semanticdb.Diagnostic.severity:type_name -> scala.meta.semanticdb.Diagnostic.Severity
	9,   // 92: scala.meta.semanticdb.Synthetic.range:type_name -> scala.meta.semanticdb.Range
	60,  // 93: scala.meta.semanticdb.Synthetic.tree:type_name -> scala.meta.semanticdb.Tree
	61,  // 94: scala.meta.semanticdb.Tree.apply_tree:type_name -> scala.meta.semanticdb.ApplyTree
	62,  // 95: scala.meta.semanticdb.Tree.function_tree:type_name -> scala.meta.semanticdb.FunctionTree
	63,  // 96: scala.meta.semanticdb.Tree.id_tree:type_name -> scala.meta.semanticdb.IdTree
	64,  // 97: scala.meta.semanticdb.Tree.literal_tree:type_name -> scala.meta.semanticdb.LiteralTree
	65,  // 98: scala.meta.semanticdb.Tree.macro_expansion_tree:type_name -> scala.meta.semanticdb.MacroExpansionTree
	66,  // 99: scala.meta.semanticdb.Tree.original_tree:type_name -> scala.meta.semanticdb.OriginalTree
	67,  // 100: scala.meta.semanticdb.Tree.select_tree:type_name -> scala.meta.semanticdb.SelectTree
	68,  // 101: scala.meta.semanticdb.Tree.type_apply_tree:type_name -> scala.meta.semanticdb.TypeApplyTree
	60,  // 102: scala.meta.semanticdb.ApplyTree.function:type_name -> scala.meta.semanticdb.Tree
	60,  // 103: scala.meta.semanticdb.ApplyTree.arguments:type_name -> scala.meta.semanticdb.Tree
	63,  // 104: scala.meta.semanticdb.FunctionTree.parameters:type_name -> scala.meta.semanticdb.IdTree
	60,  // 105: scala.meta.semanticdb.FunctionTree.body:type_name -> scala.meta.semanticdb.Tree
	29,  // 106: scala.meta.semanticdb.LiteralTree.constant:type_name -> scala.meta.semanticdb.Constant
	60,  // 107: scala.meta.semanticdb.MacroExpansionTree.before_expansion:type_name -> scala.meta.semanticdb.Tree
	12,  // 108: scala.meta.semanticdb.MacroExpansionTree.tpe:type_name -> scala.meta.semanticdb.Type
	9,   // 109: scala.meta.semanticdb.OriginalTree.range:type_name -> scala.meta.semanticdb.Range
	60,  // 110: scala.meta.semanticdb.SelectTree.qualifier:type_name -> scala.meta.semanticdb.Tree
	63,  // 111: scala.meta.semanticdb.SelectTree.id:type_name -> scala.meta.semanticdb.IdTree
	60,  // 112: scala.meta.semanticdb.TypeApplyTree.function:type_name -> scala.meta.semanticdb.Tree
	12,  // 113: scala.meta.semanticdb.TypeApplyTree.type_arguments:type_name -> scala.meta.semanticdb.Type
	12,  // 114: scala.meta.semanticdb.MatchType.CaseType.key:type_name -> scala.meta.semanticdb.Type
	12,  // 115: scala.meta.semanticdb.MatchType.CaseType.body:type_name -> scala.meta.semanticdb.Type
	116, // [116:116] is the sub-list for method output_type
	116, // [116:116] is the sub-list for method input_type
	116, // [116:116] is the sub-list for extension type_name
	116, // [116:116] is the sub-list for extension extendee
	0,   // [0:116] is the sub-list for field type_name
}

func init() { file_scala_meta_semanticdb_semanticdb_proto_init() }
func file_scala_meta_semanticdb_semanticdb_proto_init() {
	if File_scala_meta_semanticdb_semanticdb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocuments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LambdaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThisType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstantType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntersectionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuralType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistentialType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByNameType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateThisAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateWithinAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedThisAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedWithinAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolOccurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Synthetic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacroExpansionTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginalTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeApplyTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scala_meta_semanticdb_semanticdb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchType_CaseType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scala_meta_semanticdb_semanticdb_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Type_TypeRef)(nil),
		(*Type_SingleType)(nil),
		(*Type_ThisType)(nil),
		(*Type_SuperType)(nil),
		(*Type_ConstantType)(nil),
		(*Type_IntersectionType)(nil),
		(*Type_UnionType)(nil),
		(*Type_WithType)(nil),
		(*Type_StructuralType)(nil),
		(*Type_AnnotatedType)(nil),
		(*Type_ExistentialType)(nil),
		(*Type_UniversalType)(nil),
		(*Type_ByNameType)(nil),
		(*Type_RepeatedType)(nil),
		(*Type_MatchType)(nil),
		(*Type_LambdaType)(nil),
	}
	file_scala_meta_semanticdb_semanticdb_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Constant_UnitConstant)(nil),
		(*Constant_BooleanConstant)(nil),
		(*Constant_ByteConstant)(nil),
		(*Constant_ShortConstant)(nil),
		(*Constant_CharConstant)(nil),
		(*Constant_IntConstant)(nil),
		(*Constant_LongConstant)(nil),
		(*Constant_FloatConstant)(nil),
		(*Constant_DoubleConstant)(nil),
		(*Constant_StringConstant)(nil),
		(*Constant_NullConstant)(nil),
	}
	file_scala_meta_semanticdb_semanticdb_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Signature_ClassSignature)(nil),
		(*Signature_MethodSignature)(nil),
		(*Signature_TypeSignature)(nil),
		(*Signature_ValueSignature)(nil),
	}
	file_scala_meta_semanticdb_semanticdb_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*Access_PrivateAccess)(nil),
		(*Access_PrivateThisAccess)(nil),
		(*Access_PrivateWithinAccess)(nil),
		(*Access_ProtectedAccess)(nil),
		(*Access_ProtectedThisAccess)(nil),
		(*Access_ProtectedWithinAccess)(nil),
		(*Access_PublicAccess)(nil),
	}
	file_scala_meta_semanticdb_semanticdb_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*Tree_ApplyTree)(nil),
		(*Tree_FunctionTree)(nil),
		(*Tree_IdTree)(nil),
		(*Tree_LiteralTree)(nil),
		(*Tree_MacroExpansionTree)(nil),
		(*Tree_OriginalTree)(nil),
		(*Tree_SelectTree)(nil),
		(*Tree_TypeApplyTree)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scala_meta_semanticdb_semanticdb_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scala_meta_semanticdb_semanticdb_proto_goTypes,
		DependencyIndexes: file_scala_meta_semanticdb_semanticdb_proto_depIdxs,
		EnumInfos:         file_scala_meta_semanticdb_semanticdb_proto_enumTypes,
		MessageInfos:      file_scala_meta_semanticdb_semanticdb_proto_msgTypes,
	}.Build()
	File_scala_meta_semanticdb_semanticdb_proto = out.File
	file_scala_meta_semanticdb_semanticdb_proto_rawDesc = nil
	file_scala_meta_semanticdb_semanticdb_proto_goTypes = nil
	file_scala_meta_semanticdb_semanticdb_proto_depIdxs = nil
}
